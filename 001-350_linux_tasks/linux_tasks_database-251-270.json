{
  "tasks": [
    {
      "id": 251,
      "command": ["curl"],
      "difficulty": 1,
      "rating": 2,
      "category": "web",
      "tags": ["http", "api", "basic"],
      "task": "Download a webpage and save it to a file",
      "solution": "curl -o webpage.html https://example.com",
      "explanation": "curl (transfer data to/from server) -o webpage.html (save output to specified file) https://example.com (target URL)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "Quick webpage backup or offline viewing"
    },
    {
      "id": 252,
      "command": ["curl"],
      "difficulty": 1,
      "rating": 2,
      "category": "web",
      "tags": ["http", "headers", "debugging"],
      "task": "Check HTTP headers of a website without downloading content",
      "solution": "curl -I https://example.com",
      "explanation": "curl (transfer data) -I (HEAD request only, fetch headers) https://example.com (target URL)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "Check server response codes, content types, or cache headers"
    },
    {
      "id": 253,
      "command": ["curl"],
      "difficulty": 2,
      "rating": 3,
      "category": "web",
      "tags": ["api", "json", "post"],
      "task": "Send JSON data to an API endpoint using POST request",
      "solution": "curl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\",\"age\":30}' https://api.example.com/users",
      "explanation": "curl (transfer data) -X POST (HTTP POST method) -H \"Content-Type: application/json\" (set content type header) -d '{\"name\":\"John\",\"age\":30}' (JSON data payload) https://api.example.com/users (API endpoint)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "API testing, creating new resources via REST APIs"
    },
    {
      "id": 254,
      "command": ["curl"],
      "difficulty": 2,
      "rating": 3,
      "category": "web",
      "tags": ["authentication", "api", "token"],
      "task": "Access API with bearer token authentication",
      "solution": "curl -H \"Authorization: Bearer YOUR_TOKEN_HERE\" https://api.example.com/protected",
      "explanation": "curl (transfer data) -H \"Authorization: Bearer YOUR_TOKEN_HERE\" (set authorization header with bearer token) https://api.example.com/protected (protected API endpoint)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection", "valid API token"],
      "warnings": null,
      "use_case": "Accessing protected APIs, OAuth2 authentication"
    },
    {
      "id": 255,
      "command": ["curl"],
      "difficulty": 2,
      "rating": 2,
      "category": "web",
      "tags": ["download", "progress", "large files"],
      "task": "Download large file with progress bar and resume capability",
      "solution": "curl -C - -# -o largefile.zip https://example.com/largefile.zip",
      "explanation": "curl (transfer data) -C - (continue/resume download from where it left off) -# (show progress bar instead of progress meter) -o largefile.zip (save to file) https://example.com/largefile.zip (source URL)",
      "execution_time": "5+ min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "Downloading large files with unreliable connections"
    },
    {
      "id": 256,
      "command": ["curl"],
      "difficulty": 2,
      "rating": 3,
      "category": "web",
      "tags": ["forms", "post", "data"],
      "task": "Submit form data with multiple fields",
      "solution": "curl -X POST -d \"username=john&password=secret&email=john@example.com\" https://example.com/login",
      "explanation": "curl (transfer data) -X POST (HTTP POST method) -d \"username=john&password=secret&email=john@example.com\" (form data with multiple fields) https://example.com/login (form action URL)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": "Be careful with credentials in command history",
      "use_case": "Automated form submissions, login testing"
    },
    {
      "id": 257,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 4,
      "category": "web",
      "tags": ["cookies", "session", "login"],
      "task": "Login and maintain session using cookies for subsequent requests",
      "solution": "curl -c cookies.txt -d \"username=john&password=secret\" https://example.com/login && curl -b cookies.txt https://example.com/dashboard",
      "explanation": "curl -c cookies.txt (save cookies to file) -d \"username=john&password=secret\" (login data) https://example.com/login (login endpoint) && (execute next command if first succeeds) curl -b cookies.txt (use saved cookies) https://example.com/dashboard (protected page)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": "Cookies file may contain sensitive session data",
      "use_case": "Automated workflows requiring authentication state"
    },
    {
      "id": 258,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 4,
      "category": "web",
      "tags": ["file upload", "multipart", "api"],
      "task": "Upload file to server using multipart form data",
      "solution": "curl -X POST -F \"file=@document.pdf\" -F \"description=Important document\" https://api.example.com/upload",
      "explanation": "curl (transfer data) -X POST (HTTP POST method) -F \"file=@document.pdf\" (upload file using @ prefix) -F \"description=Important document\" (additional form field) https://api.example.com/upload (upload endpoint)",
      "execution_time": "1-5 min",
      "requirements": ["internet connection", "file to upload"],
      "warnings": null,
      "use_case": "File uploads to web services, API file submissions"
    },
    {
      "id": 259,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 3,
      "category": "monitoring",
      "tags": ["timing", "performance", "debugging"],
      "task": "Measure detailed timing information for HTTP request",
      "solution": "curl -w \"@curl-format.txt\" -o /dev/null -s https://example.com",
      "explanation": "curl (transfer data) -w \"@curl-format.txt\" (use custom format file for timing output) -o /dev/null (discard response body) -s (silent, no progress) https://example.com (target URL). Format file contains timing variables like %{time_total}, %{time_connect}",
      "execution_time": "< 1 min",
      "requirements": ["internet connection", "curl-format.txt file"],
      "warnings": null,
      "use_case": "Performance testing, debugging slow API responses"
    },
    {
      "id": 260,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 4,
      "category": "web",
      "tags": ["proxy", "network", "testing"],
      "task": "Make request through SOCKS proxy with custom user agent",
      "solution": "curl --socks5 127.0.0.1:1080 -H \"User-Agent: MyBot/1.0\" https://httpbin.org/ip",
      "explanation": "curl (transfer data) --socks5 127.0.0.1:1080 (use SOCKS5 proxy on localhost port 1080) -H \"User-Agent: MyBot/1.0\" (set custom user agent header) https://httpbin.org/ip (service that returns your IP)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection", "SOCKS proxy running on port 1080"],
      "warnings": null,
      "use_case": "Anonymous browsing, testing through different network paths"
    },
    {
      "id": 261,
      "command": ["curl"],
      "difficulty": 4,
      "rating": 4,
      "category": "automation",
      "tags": ["json", "api", "processing"],
      "task": "Fetch JSON data and extract specific fields using curl and jq",
      "solution": "curl -s https://api.github.com/users/octocat | jq '.name, .public_repos, .followers'",
      "explanation": "curl -s (silent mode, no progress) https://api.github.com/users/octocat (GitHub API endpoint) | (pipe output) jq '.name, .public_repos, .followers' (extract specific JSON fields)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection", "jq"],
      "warnings": null,
      "use_case": "API data extraction, automated reporting from web services"
    },
    {
      "id": 262,
      "command": ["curl"],
      "difficulty": 4,
      "rating": 5,
      "category": "web",
      "tags": ["parallel", "multiple", "performance"],
      "task": "Download multiple files in parallel with different retry policies",
      "solution": "curl -Z --retry 3 --retry-delay 2 -o \"file_#1.html\" \"https://example.com/page[1-5].html\"",
      "explanation": "curl (transfer data) -Z (parallel transfers) --retry 3 (retry failed transfers 3 times) --retry-delay 2 (wait 2 seconds between retries) -o \"file_#1.html\" (output filename pattern with sequence) \"https://example.com/page[1-5].html\" (URL pattern for pages 1-5)",
      "execution_time": "1-5 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "Bulk downloading with fault tolerance, web scraping"
    },
    {
      "id": 263,
      "command": ["curl"],
      "difficulty": 4,
      "rating": 4,
      "category": "security",
      "tags": ["ssl", "certificates", "verification"],
      "task": "Check SSL certificate details and save certificate chain",
      "solution": "curl -vI --cert-status -o /dev/null https://example.com 2>&1 | grep -E '(subject:|issuer:|expire date:)'",
      "explanation": "curl (transfer data) -vI (verbose headers only) --cert-status (check certificate status via OCSP) -o /dev/null (discard body) https://example.com (target site) 2>&1 (redirect stderr to stdout) | grep -E (filter for certificate info patterns)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "SSL certificate monitoring, security auditing"
    },
    {
      "id": 264,
      "command": ["curl"],
      "difficulty": 4,
      "rating": 5,
      "category": "web",
      "tags": ["rate limiting", "automation", "api"],
      "task": "Make API calls with rate limiting and automatic retry on specific HTTP codes",
      "solution": "curl --retry 5 --retry-connrefused --retry-delay 10 --max-time 30 -H \"X-RateLimit-Bypass: false\" https://api.example.com/data || echo \"Failed after retries\"",
      "explanation": "curl (transfer data) --retry 5 (retry up to 5 times) --retry-connrefused (retry on connection refused) --retry-delay 10 (wait 10 seconds between retries) --max-time 30 (timeout after 30 seconds) -H \"X-RateLimit-Bypass: false\" (custom header) https://api.example.com/data (API endpoint) || echo \"Failed after retries\" (fallback message)",
      "execution_time": "1-5 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "Robust API interactions with unreliable services"
    },
    {
      "id": 265,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 3,
      "category": "web",
      "tags": ["redirects", "location", "following"],
      "task": "Follow redirects and show the final URL destination",
      "solution": "curl -Ls -o /dev/null -w \"%{url_effective}\" https://bit.ly/shortened-url",
      "explanation": "curl (transfer data) -L (follow redirects) -s (silent) -o /dev/null (discard response body) -w \"%{url_effective}\" (output final URL after redirects) https://bit.ly/shortened-url (shortened URL)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "URL unshortening, tracking redirect chains"
    },
    {
      "id": 266,
      "command": ["curl"],
      "difficulty": 5,
      "rating": 5,
      "category": "automation",
      "tags": ["api", "pagination", "json", "complex"],
      "task": "Fetch all pages of paginated API results and combine into single JSON file",
      "solution": "page=1; echo '[' > all_data.json; while true; do response=$(curl -s \"https://api.example.com/data?page=$page\"); if [[ $(echo \"$response\" | jq '.results | length') -eq 0 ]]; then break; fi; if [[ $page -gt 1 ]]; then echo ',' >> all_data.json; fi; echo \"$response\" | jq '.results[]' >> all_data.json; ((page++)); done; echo ']' >> all_data.json",
      "explanation": "Complex script that initializes page counter, creates JSON array, loops through API pages using curl with pagination parameter, checks if results exist using jq, handles JSON comma separation, extracts results array, and combines all pages into single JSON file",
      "execution_time": "5+ min",
      "requirements": ["internet connection", "jq", "bash"],
      "warnings": "May create large files, can make many API requests",
      "use_case": "Complete dataset extraction from paginated APIs"
    },
    {
      "id": 267,
      "command": ["curl"],
      "difficulty": 2,
      "rating": 3,
      "category": "web",
      "tags": ["basic auth", "credentials", "api"],
      "task": "Access API endpoint with basic authentication",
      "solution": "curl -u username:password https://api.example.com/protected/data",
      "explanation": "curl (transfer data) -u username:password (basic authentication credentials) https://api.example.com/protected/data (protected endpoint requiring authentication)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection", "valid credentials"],
      "warnings": "Credentials visible in command history and process list",
      "use_case": "Accessing protected APIs, legacy authentication systems"
    },
    {
      "id": 268,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 4,
      "category": "web",
      "tags": ["webhook", "testing", "local"],
      "task": "Test webhook by sending POST data to local development server",
      "solution": "curl -X POST -H \"Content-Type: application/json\" -d @webhook_payload.json http://localhost:3000/webhook",
      "explanation": "curl (transfer data) -X POST (HTTP POST method) -H \"Content-Type: application/json\" (set JSON content type) -d @webhook_payload.json (send data from file using @ prefix) http://localhost:3000/webhook (local webhook endpoint)",
      "execution_time": "< 1 min",
      "requirements": ["local server running", "webhook_payload.json file"],
      "warnings": null,
      "use_case": "Webhook development, API testing, local service integration testing"
    },
    {
      "id": 269,
      "command": ["curl"],
      "difficulty": 3,
      "rating": 4,
      "category": "monitoring",
      "tags": ["health check", "monitoring", "status"],
      "task": "Create health check script that tests multiple endpoints and reports status",
      "solution": "for url in \"https://api1.example.com/health\" \"https://api2.example.com/status\" \"https://db.example.com/ping\"; do status=$(curl -s -o /dev/null -w \"%{http_code}\" \"$url\"); echo \"$url: $status\"; done",
      "explanation": "for loop through array of health check URLs, curl -s (silent) -o /dev/null (discard body) -w \"%{http_code}\" (output only HTTP status code) for each URL, echo the URL and its status code",
      "execution_time": "< 1 min",
      "requirements": ["internet connection"],
      "warnings": null,
      "use_case": "Service monitoring, automated health checks, uptime verification"
    },
    {
      "id": 270,
      "command": ["curl"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["api", "csv", "data processing"],
      "task": "Fetch API data, convert JSON to CSV, and save with timestamp",
      "solution": "timestamp=$(date +%Y%m%d_%H%M%S); curl -s https://api.example.com/users | jq -r '.[] | [.id, .name, .email, .created_at] | @csv' > \"users_$timestamp.csv\"",
      "explanation": "timestamp=$(date +%Y%m%d_%H%M%S) (create timestamp variable), curl -s (silent API call) https://api.example.com/users (API endpoint) | jq -r (raw output) '.[] | [.id, .name, .email, .created_at] | @csv' (extract fields and format as CSV) > \"users_$timestamp.csv\" (save to timestamped file)",
      "execution_time": "< 1 min",
      "requirements": ["internet connection", "jq"],
      "warnings": null,
      "use_case": "Data export, API data archiving, automated reporting"
    }
  ]
}