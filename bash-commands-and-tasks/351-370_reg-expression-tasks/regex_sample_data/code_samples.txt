# Python functions
def calculate_sum(a, b):
    return a + b

def validate_email(email):
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

# JavaScript functions
function getUserData(userId) {
    const apiUrl = `https://api.example.com/users/${userId}`;
    return fetch(apiUrl);
}

const validatePhone = (phone) => {
    const regex = /^\+?[1-9]\d{1,14}$/;
    return regex.test(phone);
};

// Java methods
public class UserValidator {
    private static final String EMAIL_PATTERN = 
        "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
    
    public boolean isValidEmail(String email) {
        return email.matches(EMAIL_PATTERN);
    }
}

/* C++ functions */
#include <regex>
bool validateIPAddress(const std::string& ip) {
    std::regex pattern("^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$");
    return std::regex_match(ip, pattern);
}
