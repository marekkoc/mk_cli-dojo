{
  "tasks": [
    {
      "id": 271,
      "command": ["jq"],
      "difficulty": 1,
      "rating": 2,
      "category": "data analysis",
      "tags": ["json", "basic", "pretty print"],
      "task": "Pretty print and validate JSON file syntax",
      "solution": "jq '.' sample_data/data.json",
      "explanation": "jq '.' (identity filter - outputs input unchanged but formatted) sample_data/data.json. The '.' operator validates JSON syntax and provides proper indentation and formatting.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "JSON validation and formatting for configuration files"
    },
    {
      "id": 272,
      "command": ["jq"],
      "difficulty": 1,
      "rating": 2,
      "category": "data analysis",
      "tags": ["json", "extraction", "keys"],
      "task": "List all top-level keys in JSON object",
      "solution": "jq 'keys' sample_data/data.json",
      "explanation": "jq 'keys' (extract all keys from JSON object and return as sorted array) sample_data/data.json. For objects, returns array of key names; for arrays, returns array of indices.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "JSON schema exploration and API response analysis"
    },
    {
      "id": 273,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["json", "array", "length"],
      "task": "Count number of items in JSON array",
      "solution": "jq '.users | length' sample_data/data.json",
      "explanation": "jq '.users' (access users array) | length (get array length) sample_data/data.json. The length function works with arrays, objects, strings, and null values.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Data validation and array size checking in APIs"
    },
    {
      "id": 274,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["json", "extraction", "field"],
      "task": "Extract specific field values from all array elements",
      "solution": "jq '.users[].name' sample_data/data.json",
      "explanation": "jq '.users[]' (iterate through users array) '.name' (extract name field from each element) sample_data/data.json. The [] operator flattens arrays and processes each element individually.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Extract contact lists or specific attributes from API responses"
    },
    {
      "id": 275,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["json", "array", "first"],
      "task": "Get first and last element from JSON array",
      "solution": "jq '.users | {first: .[0], last: .[-1]}' sample_data/data.json",
      "explanation": "jq '.users' (access users array) | {first: .[0], last: .[-1]} (create object with first element [0] and last element [-1]) sample_data/data.json. Negative indices count from the end of array.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Sample data inspection and boundary value checking"
    },
    {
      "id": 276,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["json", "filtering", "exists"],
      "task": "Check if specific field exists in JSON object",
      "solution": "jq 'has(\"users\")' sample_data/data.json",
      "explanation": "jq 'has(\"users\")' (check if object has key named 'users', returns true/false) sample_data/data.json. The has() function tests for key existence without accessing the value.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Schema validation and conditional processing based on field presence"
    },
    {
      "id": 277,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["json", "type", "validation"],
      "task": "Check data types of JSON values",
      "solution": "jq '.users[0] | to_entries | map({(.key): (.value | type)})' sample_data/data.json",
      "explanation": "jq '.users[0]' (get first user) | to_entries (convert object to key-value pairs) | map({(.key): (.value | type)}) (create new object mapping each key to its value's type) sample_data/data.json. Shows data types for schema validation.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Data type validation and schema analysis"
    },
    {
      "id": 278,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 3,
      "category": "data analysis",
      "tags": ["json", "filtering", "conditional"],
      "task": "Filter array elements by field value",
      "solution": "jq '.users[] | select(.department == \"Engineering\")' sample_data/data.json",
      "explanation": "jq '.users[]' (iterate through users) | select(.department == \"Engineering\") (filter elements where department equals Engineering) sample_data/data.json. select() acts as a conditional filter.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Filter employee lists, product catalogs, or any categorized data"
    },
    {
      "id": 279,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["json", "sorting", "field"],
      "task": "Sort array elements by specific field",
      "solution": "jq '.users | sort_by(.name)' sample_data/data.json",
      "explanation": "jq '.users' (access users array) | sort_by(.name) (sort array elements by name field in ascending order) sample_data/data.json. For descending order, use sort_by(.name) | reverse.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Sort user lists, product catalogs, or any structured data"
    },
    {
      "id": 280,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["json", "transformation", "map"],
      "task": "Transform array elements to new structure",
      "solution": "jq '.users | map({name: .name, contact: .email})' sample_data/data.json",
      "explanation": "jq '.users' (access users array) | map({name: .name, contact: .email}) (transform each element to new object with name and contact fields) sample_data/data.json. map() applies transformation to each array element.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Data restructuring for different API formats or simplified views"
    },
    {
      "id": 281,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["json", "aggregation", "unique"],
      "task": "Get unique values from specific field across array",
      "solution": "jq '[.users[].department] | unique' sample_data/data.json",
      "explanation": "jq '[.users[].department]' (extract all department values into array) | unique (remove duplicates and sort) sample_data/data.json. Combines array construction with unique() function.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Get distinct categories, tags, or classification values"
    },
    {
      "id": 282,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["json", "grouping", "department"],
      "task": "Group array elements by field value",
      "solution": "jq 'group_by(.department)' sample_data/employees.json",
      "explanation": "jq 'group_by(.department)' (group array elements by department field, returns array of arrays) sample_data/employees.json. Each sub-array contains elements with the same department value.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Organize data by categories for reporting and analysis"
    },
    {
      "id": 283,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["json", "searching", "contains"],
      "task": "Find elements containing specific text in any field",
      "solution": "jq '.users[] | select(.name | contains(\"John\"))' sample_data/data.json",
      "explanation": "jq '.users[]' (iterate users) | select(.name | contains(\"John\")) (filter elements where name contains 'John') sample_data/data.json. contains() performs substring matching.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Search functionality and partial text matching in datasets"
    },
    {
      "id": 284,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 4,
      "category": "data analysis",
      "tags": ["json", "conditional", "null handling"],
      "task": "Handle null values and provide defaults",
      "solution": "jq '.users[] | {name: .name, phone: (.phone // \"N/A\")}' sample_data/data.json",
      "explanation": "jq '.users[]' (iterate users) | {name: .name, phone: (.phone // \"N/A\")} (create object with name and phone, using 'N/A' as default if phone is null/missing) sample_data/data.json. The // operator provides alternative values.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Data cleaning and handling missing values in API responses"
    },
    {
      "id": 285,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["json", "merging", "objects"],
      "task": "Merge multiple JSON objects into one",
      "solution": "jq '. * {\"timestamp\": now, \"processed\": true}' sample_data/data.json",
      "explanation": "jq '. * {\"timestamp\": now, \"processed\": true}' (merge current object with new object containing timestamp and processed flag) sample_data/data.json. The * operator merges objects, with right side taking precedence.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Add metadata, timestamps, or processing flags to existing data"
    },
    {
      "id": 286,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["json", "arrays", "slicing"],
      "task": "Extract array slice and limit results",
      "solution": "jq '.users[1:3]' sample_data/data.json",
      "explanation": "jq '.users[1:3]' (extract slice from users array, starting at index 1, ending before index 3) sample_data/data.json. Array slicing uses [start:end] syntax where end is exclusive.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Pagination implementation and result limiting in APIs"
    },
    {
      "id": 287,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["json", "paths", "deep"],
      "task": "Find all paths to specific value in nested JSON",
      "solution": "jq 'paths(scalars) as $p | select(getpath($p) == \"Engineering\") | $p' sample_data/data.json",
      "explanation": "jq 'paths(scalars) as $p' (get all paths to scalar values, store in variable $p) | select(getpath($p) == \"Engineering\") (filter paths where value equals 'Engineering') | $p (output the path) sample_data/data.json. Useful for finding data locations in complex structures.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Debugging complex JSON structures and finding specific values"
    },
    {
      "id": 288,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["json", "recursion", "flattening"],
      "task": "Recursively extract all values of specific key name",
      "solution": "jq '[.. | .name? | select(. != null)]' sample_data/data.json",
      "explanation": "jq '[..]' (recursively get all values in structure) | .name? (try to access name field, ? suppresses errors) | select(. != null) (filter out null values) sample_data/data.json. Finds all 'name' fields regardless of nesting level.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Extract all instances of specific fields from complex nested data"
    },
    {
      "id": 289,
      "command": ["jq"],
      "difficulty": 5,
      "rating": 5,
      "category": "data analysis",
      "tags": ["json", "complex", "statistics"],
      "task": "Calculate statistics from array of objects with multiple aggregations",
      "solution": "jq '{count: (.users | length), departments: [.users[].department] | unique | length, avg_id: (.users | map(.id) | add / length)}' sample_data/data.json",
      "explanation": "jq '{count: (.users | length)' (count users), departments: [.users[].department] | unique | length (count unique departments), avg_id: (.users | map(.id) | add / length)} (calculate average ID) sample_data/data.json. Combines multiple aggregation operations in single expression.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Generate comprehensive data summaries and statistical reports"
    },
    {
      "id": 290,
      "command": ["jq"],
      "difficulty": 5,
      "rating": 5,
      "category": "data analysis",
      "tags": ["json", "advanced", "custom function"],
      "task": "Create custom function to process data with complex logic",
      "solution": "jq 'def classify_user: if .id <= 2 then \"senior\" elif .id <= 5 then \"mid\" else \"junior\" end; .users | map(. + {level: classify_user})' sample_data/data.json",
      "explanation": "jq 'def classify_user: if .id <= 2 then \"senior\" elif .id <= 5 then \"mid\" else \"junior\" end;' (define custom function with conditional logic) '.users | map(. + {level: classify_user})' (apply function to each user, adding level field) sample_data/data.json. Demonstrates function definition and complex conditional logic.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Complex business logic implementation and data classification"
    }
  ]
}