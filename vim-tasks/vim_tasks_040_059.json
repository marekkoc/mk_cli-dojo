{
  "tasks": [
    {
      "id": 40,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim windows",
      "tags": ["vim", "split", "horizontal"],
      "task": "Split window horizontally and navigate between splits",
      "solution": ":split (or :sp), Ctrl+w w (switch windows), Ctrl+w j/k (move up/down)",
      "explanation": ":split (split window horizontally), :sp is shortcut. Ctrl+w w (cycle between windows), Ctrl+w j (move to window below), Ctrl+w k (move to window above). Creates two views of same or different files.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Compare different parts of same file or work with multiple files"
    },
    {
      "id": 41,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim windows",
      "tags": ["vim", "split", "vertical"],
      "task": "Split window vertically and resize splits",
      "solution": ":vsplit (or :vsp), Ctrl+w + (increase height), Ctrl+w - (decrease height), Ctrl+w < > (change width)",
      "explanation": ":vsplit (split window vertically), :vsp is shortcut. Ctrl+w + (increase current window height), Ctrl+w - (decrease height), Ctrl+w < (decrease width), Ctrl+w > (increase width). Adjust window sizes as needed.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Side-by-side editing and comparison"
    },
    {
      "id": 42,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim windows",
      "tags": ["vim", "windows", "management"],
      "task": "Open different file in split and manage windows",
      "solution": ":sp sample_data/sample_code.py, Ctrl+w q (close window), Ctrl+w o (close all others)",
      "explanation": ":sp filename (split and open different file), Ctrl+w q (close current window), Ctrl+w o (close all windows except current), Ctrl+w c (close current window). Window management essentials.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt and sample_code.py available"],
      "warnings": null,
      "use_case": "Multi-file editing and reference viewing"
    },
    {
      "id": 43,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim buffers",
      "tags": ["vim", "buffers", "multiple files"],
      "task": "Work with multiple buffers (files in memory)",
      "solution": ":e filename (edit new file), :ls (list buffers), :b# (switch to previous), :b2 (switch to buffer 2)",
      "explanation": ":e filename (edit/open new file in buffer), :ls (list all buffers), :b# (switch to previous buffer), :b2 (switch to buffer number 2), :bn (next buffer), :bp (previous buffer). Buffers are files in memory.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "multiple files available"],
      "warnings": null,
      "use_case": "Efficient multi-file development workflow"
    },
    {
      "id": 44,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim buffers",
      "tags": ["vim", "buffers", "navigation"],
      "task": "Navigate and manage buffer list",
      "solution": ":bnext (or :bn), :bprev (or :bp), :bfirst, :blast, :bd (delete buffer)",
      "explanation": ":bn/:bnext (next buffer), :bp/:bprev (previous buffer), :bf/:bfirst (first buffer), :bl/:blast (last buffer), :bd (delete/close buffer). Efficient buffer navigation without using mouse or splits.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "multiple buffers open"],
      "warnings": null,
      "use_case": "Quick switching between open files"
    },
    {
      "id": 45,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim registers",
      "tags": ["vim", "registers", "clipboard"],
      "task": "Use named registers to store multiple clipboard contents",
      "solution": "\"ayy (yank line to register 'a'), \"ap (paste from register 'a'), \"byy (yank to register 'b')",
      "explanation": "\"ayy (yank current line to register 'a'), \"ap (paste from register 'a'), \"byy (yank to register 'b'). Named registers a-z store text separately. Allows multiple clipboards.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Managing multiple pieces of copied text simultaneously"
    },
    {
      "id": 46,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim registers",
      "tags": ["vim", "registers", "system clipboard"],
      "task": "Copy to and paste from system clipboard",
      "solution": "\"+yy (yank to system clipboard), \"+p (paste from system clipboard), \"*yy (selection clipboard)",
      "explanation": "\"+yy (yank to system clipboard register), \"+p (paste from system clipboard), \"*yy (yank to selection/middle-click clipboard on X11). Integrates vim with system clipboard.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "system with clipboard support"],
      "warnings": "Requires vim compiled with clipboard support (+clipboard)",
      "use_case": "Share text between vim and other applications"
    },
    {
      "id": 47,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim registers",
      "tags": ["vim", "registers", "view"],
      "task": "View register contents and use special registers",
      "solution": ":reg (view all registers), \"0p (paste from yank register), \"1p (paste from delete register)",
      "explanation": ":reg (display contents of all registers), \"0 (yank register - last yanked text), \"1-9 (delete registers - last 9 deletions), \"% (current filename), \". (last inserted text). Special purpose registers.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "text in registers"],
      "warnings": null,
      "use_case": "Debug register contents and access special text"
    },
    {
      "id": 48,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim macros",
      "tags": ["vim", "macros", "recording"],
      "task": "Record and execute a macro",
      "solution": "qa (start recording to register 'a'), perform actions, q (stop recording), @a (execute macro 'a'), 5@a (execute 5 times)",
      "explanation": "qa (start recording macro into register 'a'), perform editing actions, q (stop recording), @a (execute macro), 5@a (execute macro 5 times), @@ (repeat last macro). Powerful automation tool.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Automate repetitive editing tasks"
    },
    {
      "id": 49,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim macros",
      "tags": ["vim", "macros", "complex"],
      "task": "Create macro to format multiple lines identically",
      "solution": "qa (record), 0 (go to start), i (insert), type prefix, Esc, A (append), type suffix, Esc, j (next line), q (stop), then @a to repeat",
      "explanation": "Complex macro example: qa 0 i\"Esc A\"Esc j q (record: go to line start, insert quote, go to end, add quote, next line). Creates macro to quote lines. Execute with @a on multiple lines.",
      "execution_time": "1-5 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Format code, add prefixes/suffixes to multiple lines"
    },
    {
      "id": 50,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim marks",
      "tags": ["vim", "marks", "navigation"],
      "task": "Set and use marks for quick navigation",
      "solution": "ma (set mark 'a'), 'a (go to line with mark 'a'), `a (go to exact position of mark 'a')",
      "explanation": "ma (set mark 'a' at current cursor position), 'a (jump to line containing mark 'a'), `a (jump to exact character position of mark 'a'). Marks a-z are file-local, A-Z are global across files.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Quick navigation between important locations in files"
    },
    {
      "id": 51,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim marks",
      "tags": ["vim", "marks", "special"],
      "task": "Use special automatic marks",
      "solution": "'' (return to previous position), '. (last edit position), '[ and '] (last yanked/changed text)",
      "explanation": "'' (jump back to previous position), '. (jump to last edit position), '[ (start of last change), '] (end of last change), '< and '> (start/end of last visual selection). Automatically set marks.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open with some edits"],
      "warnings": null,
      "use_case": "Navigate editing history and undo locations"
    },
    {
      "id": 52,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 4,
      "category": "vim folding",
      "tags": ["vim", "folding", "code structure"],
      "task": "Create and manage text folds",
      "solution": "zf (create fold), zo (open fold), zc (close fold), za (toggle fold), zR (open all), zM (close all)",
      "explanation": "zf{motion} (create fold), zo (open fold under cursor), zc (close fold), za (toggle fold), zR (open all folds), zM (close all folds). Organize large files by hiding sections.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "sample_code.py open"],
      "warnings": null,
      "use_case": "Navigate large code files by hiding/showing sections"
    },
    {
      "id": 53,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim command mode",
      "tags": ["vim", "command", "range"],
      "task": "Use line ranges with commands",
      "solution": ":1,5d (delete lines 1-5), :3,8s/old/new/g (replace in lines 3-8), :.,$s/a/b/g (current line to end)",
      "explanation": ":1,5d (delete lines 1 through 5), :3,8s/old/new/g (substitute in lines 3-8), :.,$s/a/b/g (current line to end of file), :%s (entire file). Line ranges make commands more precise.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Precise editing operations on specific line ranges"
    },
    {
      "id": 54,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim command mode",
      "tags": ["vim", "command", "global"],
      "task": "Use global command to operate on matching lines",
      "solution": ":g/Alice/d (delete all lines containing 'Alice'), :g/^$/d (delete empty lines), :v/the/d (delete lines NOT containing 'the')",
      "explanation": ":g/pattern/command (execute command on lines matching pattern), :v/pattern/command (execute on lines NOT matching). :g/Alice/d deletes all lines with 'Alice', :g/^$/d removes empty lines. Very powerful for bulk operations.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": "Global commands can make major changes - use carefully",
      "use_case": "Bulk operations on lines matching specific patterns"
    },
    {
      "id": 55,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim file operations",
      "tags": ["vim", "file", "read write"],
      "task": "Read file contents into current buffer and write portions to new file",
      "solution": ":r filename (read file), :w newfile (write all), :5,10w partial.txt (write lines 5-10)",
      "explanation": ":r filename (read file contents at cursor position), :w newfile (write current buffer to new file), :5,10w partial.txt (write only lines 5-10 to file).