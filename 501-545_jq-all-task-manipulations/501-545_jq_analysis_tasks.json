{
  "tasks": [
    {
      "id": 501,
      "command": ["jq"],
      "difficulty": 1,
      "rating": 2,
      "category": "data analysis",
      "tags": ["jq", "basic", "list commands"],
      "task": "List all unique commands used in the tasks database",
      "solution": "jq -r '.tasks[].command[]' all_linux_tasks-001-350.json | sort | uniq",
      "explanation": "jq -r '.tasks[].command[]' (extract all command arrays and flatten) | sort | uniq (sort and remove duplicates). Shows all unique commands covered in the database for inventory purposes.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Get overview of all commands covered in the learning database"
    },
    {
      "id": 502,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "statistics", "difficulty"],
      "task": "Count tasks by difficulty level",
      "solution": "jq '.tasks | group_by(.difficulty) | map({difficulty: .[0].difficulty, count: length})' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks | group_by(.difficulty)' (group tasks by difficulty level) | map({difficulty: .[0].difficulty, count: length}) (create objects with difficulty and count). Shows distribution of tasks across difficulty levels.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Analyze learning progression and task distribution for curriculum planning"
    },
    {
      "id": 503,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "rating"],
      "task": "Find all 5-star rated tasks for advanced learning",
      "solution": "jq '.tasks[] | select(.rating == 5) | {id: .id, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.rating == 5)' (filter tasks with 5-star rating) | {id: .id, command: .command, task: .task} (extract key information). Identifies the most interesting and unique tasks for advanced practice.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Find the most creative and impressive command combinations for skill demonstration"
    },
    {
      "id": 504,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "category"],
      "task": "List all tasks in specific category",
      "solution": "jq '.tasks[] | select(.category == \"file management\") | {id: .id, task: .task, difficulty: .difficulty}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.category == \"file management\")' (filter by category) | {id: .id, task: .task, difficulty: .difficulty} (extract relevant fields). Helps focus learning on specific command categories.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Focus learning on specific skill areas like file management or networking"
    },
    {
      "id": 505,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "search", "text"],
      "task": "Search for tasks containing specific keywords in description",
      "solution": "jq '.tasks[] | select(.task | test(\"backup|archive\"; \"i\")) | {id: .id, task: .task, command: .command}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.task | test(\"backup|archive\"; \"i\"))' (filter tasks where task description contains 'backup' or 'archive', case-insensitive) | {id: .id, task: .task, command: .command} (extract relevant info). Enables keyword-based task discovery.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Find tasks related to specific topics or use cases for targeted learning"
    },
    {
      "id": 506,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "beginner"],
      "task": "Get beginner-friendly tasks (difficulty 1-2) for new users",
      "solution": "jq '.tasks[] | select(.difficulty <= 2) | {id: .id, command: .command, task: .task, difficulty: .difficulty} | sort_by(.difficulty)' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.difficulty <= 2)' (filter easy tasks) | {id: .id, command: .command, task: .task, difficulty: .difficulty} (extract key info) | sort_by(.difficulty) (sort by difficulty). Perfect for beginners starting their Linux journey.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Create beginner learning path with manageable tasks"
    },
    {
      "id": 507,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "statistics", "commands"],
      "task": "Count how many tasks use each specific command",
      "solution": "jq -r '.tasks[].command[]' all_linux_tasks-001-350.json | sort | uniq -c | sort -nr | awk '{printf \"%s: %d tasks\\n\", $2, $1}'",
      "explanation": "jq -r '.tasks[].command[]' (extract all commands) | sort | uniq -c (count occurrences) | sort -nr (sort by count descending) | awk '{printf...}' (format output). Shows which commands are most covered in the database.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Identify which commands need more examples or are well-covered"
    },
    {
      "id": 508,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "warnings"],
      "task": "Find all tasks that have warnings for safety review",
      "solution": "jq '.tasks[] | select(.warnings != null) | {id: .id, command: .command, task: .task, warnings: .warnings}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.warnings != null)' (filter tasks with warnings) | {id: .id, command: .command, task: .task, warnings: .warnings} (extract relevant information). Identifies potentially dangerous tasks that require caution.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Safety review and identification of tasks requiring special attention"
    },
    {
      "id": 509,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "filtering", "execution time"],
      "task": "Group tasks by execution time for time management",
      "solution": "jq '.tasks | group_by(.execution_time) | map({time: .[0].execution_time, count: length, tasks: [.[].id]})' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks | group_by(.execution_time)' (group by execution time) | map({time: .[0].execution_time, count: length, tasks: [.[].id]}) (create summary with time, count, and task IDs). Helps plan practice sessions based on available time.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Plan practice sessions based on available time slots"
    },
    {
      "id": 510,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "requirements"],
      "task": "Find tasks that require specific external tools",
      "solution": "jq '.tasks[] | select(.requirements != null) | {id: .id, command: .command, requirements: .requirements, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.requirements != null)' (filter tasks with requirements) | {id: .id, command: .command, requirements: .requirements, task: .task} (extract key info). Shows tasks that need additional software installation.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Identify tasks requiring additional software installation before practice"
    },
    {
      "id": 511,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "tags", "analysis"],
      "task": "Get all unique tags and their frequency",
      "solution": "jq -r '.tasks[].tags[]' all_linux_tasks-001-350.json | sort | uniq -c | sort -nr | head -20",
      "explanation": "jq -r '.tasks[].tags[]' (extract all tags from all tasks) | sort | uniq -c (count occurrences) | sort -nr (sort by frequency) | head -20 (show top 20). Reveals most common topics and themes in the database.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Understand the main topics and focus areas in the command database"
    },
    {
      "id": 512,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "filtering", "complex"],
      "task": "Find tasks using multiple commands (complex pipelines)",
      "solution": "jq '.tasks[] | select((.command | length) > 1) | {id: .id, command: .command, task: .task, difficulty: .difficulty} | sort_by(.difficulty)' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select((.command | length) > 1)' (filter tasks using multiple commands) | {id: .id, command: .command, task: .task, difficulty: .difficulty} (extract info) | sort_by(.difficulty) (sort by difficulty). Shows complex command combinations and pipelines.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Learn advanced command combinations and pipeline techniques"
    },
    {
      "id": 513,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "statistics", "categories"],
      "task": "Show distribution of tasks across all categories",
      "solution": "jq '.tasks | group_by(.category) | map({category: .[0].category, count: length}) | sort_by(-.count)' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks | group_by(.category)' (group by category) | map({category: .[0].category, count: length}) (count tasks per category) | sort_by(-.count) (sort by count descending). Shows which categories have most/least coverage.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Analyze curriculum balance and identify areas needing more content"
    },
    {
      "id": 514,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["jq", "advanced", "learning path"],
      "task": "Create personalized learning path based on difficulty progression",
      "solution": "jq '.tasks | group_by(.difficulty) | map({difficulty: .[0].difficulty, tasks: [.[] | {id: .id, command: .command, task: .task}]}) | {learning_path: ., summary: {total_tasks: (.[] | .tasks | length) | add, difficulties: [.[].difficulty]}}' all_linux_tasks-001-350.json",
      "explanation": "Complex query that groups tasks by difficulty, creates structured learning path with tasks organized by progression level, and includes summary statistics. Creates a complete curriculum structure.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Generate structured learning curriculum with proper difficulty progression"
    },
    {
      "id": 515,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "search", "specific command"],
      "task": "Find all tasks using specific command like 'awk'",
      "solution": "jq '.tasks[] | select(.command[] | test(\"awk\")) | {id: .id, task: .task, solution: .solution}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.command[] | test(\"awk\"))' (filter tasks where any command contains 'awk') | {id: .id, task: .task, solution: .solution} (extract task details). Perfect for focused learning on specific commands.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Deep dive into specific command usage and examples"
    },
    {
      "id": 516,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "random", "practice"],
      "task": "Get random task for daily practice",
      "solution": "jq '.tasks | length as $len | .tasks[($len | . * now * 1000 | floor) % $len]' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks | length as $len' (get total count) | '.tasks[($len | . * now * 1000 | floor) % $len]' (use current timestamp to generate pseudo-random index). Provides random task selection for varied practice.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Daily practice with random task selection to avoid routine"
    },
    {
      "id": 517,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "export", "csv"],
      "task": "Export task summary to CSV format",
      "solution": "jq -r '.tasks[] | [.id, .difficulty, .rating, .category, (.command | join(\"|\")), .task] | @csv' all_linux_tasks-001-350.json",
      "explanation": "jq -r '.tasks[]' (iterate tasks) | [.id, .difficulty, .rating, .category, (.command | join(\"|\")), .task] (create array with key fields, join commands with pipe) | @csv (format as CSV). Exports database for spreadsheet analysis.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Export data for analysis in spreadsheet applications or external tools"
    },
    {
      "id": 518,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "validation", "quality"],
      "task": "Validate database integrity and find missing fields",
      "solution": "jq '.tasks[] | select(.id == null or .command == null or .task == null or .solution == null) | {id: .id, issues: [if .id == null then \"missing_id\" else empty end, if .command == null then \"missing_command\" else empty end]}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.id == null or .command == null...)' (filter tasks with missing required fields) with conditional array building to identify specific issues. Data quality validation for database maintenance.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Database quality assurance and integrity checking"
    },
    {
      "id": 519,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "quick tasks"],
      "task": "Find quick tasks that execute in under 1 minute",
      "solution": "jq '.tasks[] | select(.execution_time == \"< 1 min\") | {id: .id, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.execution_time == \"< 1 min\")' (filter by execution time) | {id: .id, command: .command, task: .task} (extract relevant info). Perfect for quick practice sessions or demonstrations.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Find tasks suitable for quick practice sessions or live demonstrations"
    },
    {
      "id": 520,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "advanced", "statistics"],
      "task": "Calculate comprehensive database statistics",
      "solution": "jq '{total_tasks: (.tasks | length), avg_difficulty: (.tasks | map(.difficulty) | add / length), avg_rating: (.tasks | map(.rating) | add / length), categories: (.tasks | group_by(.category) | length), unique_commands: (.tasks | map(.command[]) | unique | length)}' all_linux_tasks-001-350.json",
      "explanation": "Complex statistical analysis calculating total tasks, average difficulty, average rating, category count, and unique commands. Comprehensive overview of database metrics for reporting and analysis.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Generate comprehensive database reports and statistics for documentation"
    },
    {
      "id": 521,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "use cases"],
      "task": "Find tasks by specific use case or application area",
      "solution": "jq '.tasks[] | select(.use_case | test(\"automation|monitoring\"; \"i\")) | {id: .id, command: .command, use_case: .use_case}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.use_case | test(\"automation|monitoring\"; \"i\"))' (filter by use case containing specific keywords) | {id: .id, command: .command, use_case: .use_case} (extract relevant fields). Helps find tasks for specific professional applications.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Find tasks relevant to specific job roles or professional scenarios"
    },
    {
      "id": 522,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "complexity", "analysis"],
      "task": "Analyze task complexity by solution length and command count",
      "solution": "jq '.tasks[] | {id: .id, command_count: (.command | length), solution_length: (.solution | length), complexity_score: ((.command | length) + (.solution | length / 50))} | sort_by(-.complexity_score) | .[0:10]' all_linux_tasks-001-350.json",
      "explanation": "jq creates complexity score based on number of commands and solution length, then sorts by complexity to find most complex tasks. Custom metric for identifying advanced learning challenges.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Identify most complex tasks for advanced skill development"
    },
    {
      "id": 523,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "specific ID", "lookup"],
      "task": "Get detailed information for specific task ID",
      "solution": "jq '.tasks[] | select(.id == 150)' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.id == 150)' (filter by specific task ID). Simple lookup to get complete information for a specific task including solution, explanation, and metadata.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Quick reference lookup for specific tasks during practice or teaching"
    },
    {
      "id": 524,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "medical", "specialized"],
      "task": "Find all medical imaging related tasks",
      "solution": "jq '.tasks[] | select(.category == \"medical imaging\" or (.tags[] | test(\"dicom|medical\"; \"i\"))) | {id: .id, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by medical imaging category or medical/DICOM tags to find specialized medical tasks. Useful for healthcare IT professionals or medical imaging specialists.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Healthcare IT and medical imaging workflow automation"
    },
    {
      "id": 525,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "range", "ID range"],
      "task": "Get tasks within specific ID range",
      "solution": "jq '.tasks[] | select(.id >= 100 and .id <= 200) | {id: .id, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.id >= 100 and .id <= 200)' (filter by ID range) | {id: .id, command: .command, task: .task} (extract key info). Useful for working with specific sections of the database.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Work with specific sections of the task database for focused learning"
    },
    {
      "id": 526,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "docker", "containers"],
      "task": "Find all containerization and Docker related tasks",
      "solution": "jq '.tasks[] | select(.category == \"containers\" or (.command[] | test(\"docker\")) or (.tags[] | test(\"docker|container\"; \"i\"))) | {id: .id, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by containers category, docker command usage, or container-related tags. Specifically targets modern containerization workflows and Docker operations.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "DevOps and containerization learning for modern application deployment"
    },
    {
      "id": 527,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "sorting", "rating"],
      "task": "Show top 10 highest rated tasks",
      "solution": "jq '.tasks | sort_by(-.rating) | .[0:10] | .[] | {id: .id, rating: .rating, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks | sort_by(-.rating)' (sort by rating descending) | .[0:10] (take first 10) | .[] (iterate) | {id: .id, rating: .rating, command: .command, task: .task} (format output). Shows the most impressive and creative tasks.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Find the most impressive tasks for skill demonstration or advanced practice"
    },
    {
      "id": 528,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "git", "version control"],
      "task": "Find all Git and version control related tasks",
      "solution": "jq '.tasks[] | select(.category == \"version control\" or (.command[] | test(\"git\")) or (.tags[] | test(\"git|version\"; \"i\"))) | {id: .id, command: .command, task: .task, difficulty: .difficulty}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by version control category, git command usage, or version control tags. Targets software development workflows and Git operations for developers.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Software development workflow learning and Git mastery"
    },
    {
      "id": 529,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["jq", "custom", "learning plan"],
      "task": "Create custom learning plan filtered by multiple criteria",
      "solution": "jq --arg cat \"$1\" --argjson diff \"$2\" '.tasks[] | select(.category == $cat and .difficulty <= $diff and .rating >= 3) | {id: .id, command: .command, task: .task, difficulty: .difficulty, rating: .rating} | sort_by(.difficulty)' all_linux_tasks-001-350.json",
      "explanation": "jq with command-line arguments for category and max difficulty, filtering for quality tasks (rating >= 3) and sorting by difficulty. Creates customizable learning plans based on user preferences and skill level.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": "Use with shell variables: jq --arg cat \"file management\" --argjson diff 3",
      "use_case": "Generate personalized learning plans based on specific interests and skill levels"
    },
    {
      "id": 530,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "count", "summary"],
      "task": "Count total tasks and show basic database summary",
      "solution": "jq '{total_tasks: (.tasks | length), difficulty_range: [(.tasks | map(.difficulty) | min), (.tasks | map(.difficulty) | max)], rating_range: [(.tasks | map(.rating) | min), (.tasks | map(.rating) | max)]}' all_linux_tasks-001-350.json",
      "explanation": "jq creates summary object with total count, difficulty range (min/max), and rating range. Quick overview of database scope and content distribution.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Quick database overview and health check for documentation"
    },
    {
      "id": 531,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "networking", "system admin"],
      "task": "Find all networking and system administration tasks",
      "solution": "jq '.tasks[] | select(.category == \"network\" or .category == \"system admin\" or (.tags[] | test(\"network|ssh|admin\"; \"i\"))) | {id: .id, category: .category, command: .command, task: .task}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by network/system admin categories or networking-related tags. Targets system administration skills and network management tasks for IT professionals.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "System administration and network management skill development"
    },
    {
      "id": 532,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "no requirements"],
      "task": "Find tasks that don't require additional software installation",
      "solution": "jq '.tasks[] | select(.requirements == null) | {id: .id, command: .command, task: .task, difficulty: .difficulty}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.requirements == null)' (filter tasks with no requirements) | {id: .id, command: .command, task: .task, difficulty: .difficulty} (extract info). Perfect for practice on minimal systems or restricted environments.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Practice on minimal systems or environments with restricted software installation"
    },
    {
      "id": 533,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "automation", "scripting"],
      "task": "Find all automation and scripting related tasks",
      "solution": "jq '.tasks[] | select(.category == \"automation\" or .category == \"scripting\" or (.tags[] | test(\"automation|script|cron|loop\"; \"i\"))) | {id: .id, command: .command, task: .task, execution_time: .execution_time}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by automation/scripting categories or automation-related tags. Targets workflow automation, scheduling, and scripting skills for productivity enhancement.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Learn automation techniques for repetitive tasks and workflow optimization"
    },
    {
      "id": 534,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "filtering", "long running"],
      "task": "Find long-running tasks for background practice",
      "solution": "jq '.tasks[] | select(.execution_time == \"long-running\" or .execution_time == \"5+ min\") | {id: .id, command: .command, task: .task, execution_time: .execution_time}' all_linux_tasks-001-350.json",
      "explanation": "jq '.tasks[] | select(.execution_time == \"long-running\" or .execution_time == \"5+ min\")' (filter by execution time) | {id: .id, command: .command, task: .task, execution_time: .execution_time} (extract info). Identifies tasks suitable for background learning or extended practice sessions.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Find tasks for extended practice sessions or background learning"
    },
    {
      "id": 535,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "web", "api"],
      "task": "Find all web and API related tasks",
      "solution": "jq '.tasks[] | select(.category == \"web\" or (.command[] | test(\"curl|wget|jq\")) or (.tags[] | test(\"api|http|web|json\"; \"i\"))) | {id: .id, command: .command, task: .task, use_case: .use_case}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by web category, web-related commands (curl, wget, jq), or web/API tags. Targets modern web development and API integration skills.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Web development, API integration, and modern data processing skills"
    },
    {
      "id": 536,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["jq", "advanced", "skill assessment"],
      "task": "Create skill assessment report by analyzing task completion patterns",
      "solution": "jq '{skill_levels: {beginner: [.tasks[] | select(.difficulty <= 2)], intermediate: [.tasks[] | select(.difficulty >= 3 and .difficulty <= 4)], advanced: [.tasks[] | select(.difficulty == 5)]} | map_values(length), command_expertise: (.tasks | group_by(.command[0]) | map({command: .[0].command[0], count: length, avg_difficulty: (map(.difficulty) | add / length)}) | sort_by(-.count))}' all_linux_tasks-001-350.json",
      "explanation": "Complex analysis creating skill level distribution and command expertise metrics. Groups tasks by difficulty levels and analyzes command usage patterns with average difficulty per command.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Comprehensive skill assessment and learning progress evaluation"
    },
    {
      "id": 537,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "monitoring", "system"],
      "task": "Find all monitoring and system observation tasks",
      "solution": "jq '.tasks[] | select(.category == \"monitoring\" or (.tags[] | test(\"monitoring|watch|real-time|stats\"; \"i\"))) | {id: .id, command: .command, task: .task, difficulty: .difficulty}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by monitoring category or monitoring-related tags. Focuses on system observation, performance monitoring, and real-time analysis skills.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "System monitoring and performance analysis skill development"
    },
    {
      "id": 538,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "backup", "data management"],
      "task": "Find all backup and data management tasks",
      "solution": "jq '.tasks[] | select(.category == \"backup\" or (.tags[] | test(\"backup|archive|sync|compression\"; \"i\"))) | {id: .id, command: .command, task: .task, warnings: .warnings}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by backup category or backup-related tags. Targets data protection, archiving, and backup strategy skills for data management professionals.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Data protection and backup strategy implementation"
    },
    {
      "id": 539,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "text processing", "data"],
      "task": "Find all text processing and data manipulation tasks",
      "solution": "jq '.tasks[] | select(.category == \"text processing\" or .category == \"data analysis\" or (.command[] | test(\"awk|sed|grep|cut|sort\"))) | {id: .id, command: .command, task: .task, rating: .rating}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by text processing/data analysis categories or text manipulation commands. Essential skills for data processing and text manipulation workflows.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Data processing and text manipulation skill development"
    },
    {
      "id": 540,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "security", "admin"],
      "task": "Find all security-related tasks",
      "solution": "jq '.tasks[] | select(.category == \"security\" or (.tags[] | test(\"security|permissions|auth|ssl|encryption\"; \"i\"))) | {id: .id, command: .command, task: .task, warnings: .warnings}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by security category or security-related tags. Focuses on system security, authentication, permissions, and security auditing skills.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Security administration and system hardening skill development"
    },
    {
      "id": 541,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["jq", "comprehensive", "report"],
      "task": "Generate comprehensive learning analytics report",
      "solution": "jq '{database_summary: {total_tasks: (.tasks | length), categories: (.tasks | group_by(.category) | length), unique_commands: (.tasks | map(.command[]) | unique | length)}, difficulty_distribution: (.tasks | group_by(.difficulty) | map({level: .[0].difficulty, count: length, percentage: ((length / ((.tasks | length) * 100)) | floor)})), top_categories: (.tasks | group_by(.category) | map({category: .[0].category, count: length}) | sort_by(-.count) | .[0:5]), recommended_progression: {beginner: [.tasks[] | select(.difficulty <= 2 and .rating >= 4) | .id][0:5], intermediate: [.tasks[] | select(.difficulty == 3 and .rating >= 4) | .id][0:5], advanced: [.tasks[] | select(.difficulty >= 4 and .rating == 5) | .id][0:5]}}' all_linux_tasks-001-350.json",
      "explanation": "Comprehensive analytics generating database summary, difficulty distribution with percentages, top categories, and recommended learning progression with high-quality tasks for each level.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Complete learning analytics for curriculum planning and progress tracking"
    },
    {
      "id": 542,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "multimedia", "files"],
      "task": "Find all multimedia and file processing tasks",
      "solution": "jq '.tasks[] | select(.category == \"multimedia\" or (.tags[] | test(\"image|video|audio|media|conversion\"; \"i\"))) | {id: .id, command: .command, task: .task, requirements: .requirements}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by multimedia category or media-related tags. Targets image, video, and audio processing skills for content creation and media workflows.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Media processing and content creation workflow development"
    },
    {
      "id": 543,
      "command": ["jq"],
      "difficulty": 3,
      "rating": 4,
      "category": "data analysis",
      "tags": ["jq", "database", "storage"],
      "task": "Find all database and storage related tasks",
      "solution": "jq '.tasks[] | select(.category == \"database\" or (.tags[] | test(\"database|sql|storage|disk\"; \"i\"))) | {id: .id, command: .command, task: .task, execution_time: .execution_time}' all_linux_tasks-001-350.json",
      "explanation": "jq filters by database category or database/storage related tags. Focuses on database administration, data storage, and disk management skills.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Database administration and storage management skill development"
    },
    {
      "id": 544,
      "command": ["jq"],
      "difficulty": 2,
      "rating": 3,
      "category": "data analysis",
      "tags": ["jq", "export", "filtered"],
      "task": "Export filtered task list for specific learning goal",
      "solution": "jq --arg goal \"$1\" '.tasks[] | select(.use_case | test($goal; \"i\")) | {id: .id, command: .command, task: .task, solution: .solution, use_case: .use_case}' all_linux_tasks-001-350.json",
      "explanation": "jq with command-line argument for learning goal, filtering tasks by use case matching the goal. Creates customized exports for specific learning objectives or professional needs.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": "Use with shell variable: jq --arg goal \"automation\"",
      "use_case": "Create focused learning materials for specific professional goals or projects"
    },
    {
      "id": 545,
      "command": ["jq"],
      "difficulty": 4,
      "rating": 5,
      "category": "data analysis",
      "tags": ["jq", "interactive", "menu"],
      "task": "Create interactive task browser with difficulty-based navigation",
      "solution": "jq -r '.tasks | group_by(.difficulty) | to_entries[] | \"Difficulty \\(.key + 1): \\(.value | length) tasks\" as $header | $header, (.value[] | \"  [\\(.id)] \\(.command | join(\", \")) - \\(.task[0:80])...\")' all_linux_tasks-001-350.json",
      "explanation": "Advanced jq creating formatted, browsable output grouped by difficulty with task previews. Groups tasks by difficulty level and formats them as an interactive-style menu with truncated descriptions.",
      "execution_time": "< 1 min",
      "requirements": ["jq"],
      "warnings": null,
      "use_case": "Interactive command-line task browser for efficient task discovery and selection"
    }
  ]
}