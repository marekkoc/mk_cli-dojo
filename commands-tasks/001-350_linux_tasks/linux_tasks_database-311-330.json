{
  "tasks": [
    {
      "id": 311,
      "command": ["docker"],
      "difficulty": 1,
      "rating": 2,
      "category": "containers",
      "tags": ["docker", "version", "info"],
      "task": "Check Docker version and system information",
      "solution": "docker --version && docker system info",
      "explanation": "docker --version (show Docker version) && docker system info (show detailed system information including storage driver, containers count, images count, and system configuration)",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Verify Docker installation and system health check"
    },
    {
      "id": 312,
      "command": ["docker"],
      "difficulty": 1,
      "rating": 2,
      "category": "containers",
      "tags": ["docker", "pull", "images"],
      "task": "Download Docker image from registry",
      "solution": "docker pull nginx:latest",
      "explanation": "docker pull nginx:latest (download nginx image with latest tag from Docker Hub registry). Image is downloaded and stored locally for creating containers.",
      "execution_time": "1-5 min",
      "requirements": ["docker", "internet connection"],
      "warnings": null,
      "use_case": "Prepare images for container deployment"
    },
    {
      "id": 313,
      "command": ["docker"],
      "difficulty": 1,
      "rating": 2,
      "category": "containers",
      "tags": ["docker", "images", "list"],
      "task": "List all locally stored Docker images",
      "solution": "docker images",
      "explanation": "docker images (list all locally stored images with repository, tag, image ID, creation date, and size). Shows available images for creating containers.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Image inventory management and cleanup planning"
    },
    {
      "id": 314,
      "command": ["docker"],
      "difficulty": 2,
      "rating": 3,
      "category": "containers",
      "tags": ["docker", "run", "container"],
      "task": "Run simple container with interactive terminal",
      "solution": "docker run -it ubuntu:latest bash",
      "explanation": "docker run (create and start container) -i (interactive mode) -t (allocate pseudo-TTY) ubuntu:latest (image name and tag) bash (command to run inside container). Creates interactive shell session in Ubuntu container.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": "Type 'exit' to leave container",
      "use_case": "Quick testing environment and interactive debugging"
    },
    {
      "id": 315,
      "command": ["docker"],
      "difficulty": 2,
      "rating": 3,
      "category": "containers",
      "tags": ["docker", "run", "detached"],
      "task": "Run container in background (detached mode)",
      "solution": "docker run -d --name web-server nginx:latest",
      "explanation": "docker run -d (detached mode, run in background) --name web-server (assign container name) nginx:latest (image to use). Container runs in background and can be managed by name.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Production service deployment and long-running services"
    },
    {
      "id": 316,
      "command": ["docker"],
      "difficulty": 2,
      "rating": 3,
      "category": "containers",
      "tags": ["docker", "ps", "list"],
      "task": "List running containers",
      "solution": "docker ps",
      "explanation": "docker ps (list currently running containers with container ID, image, command, creation time, status, ports, and names). Add -a flag to see all containers including stopped ones.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Container monitoring and management overview"
    },
    {
      "id": 317,
      "command": ["docker"],
      "difficulty": 2,
      "rating": 3,
      "category": "containers",
      "tags": ["docker", "stop", "container"],
      "task": "Stop running container",
      "solution": "docker stop web-server",
      "explanation": "docker stop web-server (gracefully stop container named web-server by sending SIGTERM signal, then SIGKILL after timeout). Container is stopped but not removed.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Graceful service shutdown and container lifecycle management"
    },
    {
      "id": 318,
      "command": ["docker"],
      "difficulty": 2,
      "rating": 3,
      "category": "containers",
      "tags": ["docker", "start", "container"],
      "task": "Start stopped container",
      "solution": "docker start web-server",
      "explanation": "docker start web-server (start previously stopped container named web-server). Container resumes with same configuration and data as when it was stopped.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Resume services and restart stopped containers"
    },
    {
      "id": 319,
      "command": ["docker"],
      "difficulty": 2,
      "rating": 3,
      "category": "containers",
      "tags": ["docker", "rm", "cleanup"],
      "task": "Remove stopped container",
      "solution": "docker rm web-server",
      "explanation": "docker rm web-server (remove stopped container named web-server). Container must be stopped before removal. Use -f flag to force remove running container.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": "Container data will be permanently lost unless volumes are used",
      "use_case": "Container cleanup and resource management"
    },
    {
      "id": 320,
      "command": ["docker"],
      "difficulty": 3,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "port", "mapping"],
      "task": "Run container with port mapping",
      "solution": "docker run -d -p 8080:80 --name web nginx:latest",
      "explanation": "docker run -d (detached) -p 8080:80 (map host port 8080 to container port 80) --name web (container name) nginx:latest. Makes nginx accessible on host port 8080.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": "Ensure host port 8080 is not already in use",
      "use_case": "Web service deployment and external access configuration"
    },
    {
      "id": 321,
      "command": ["docker"],
      "difficulty": 3,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "volume", "mount"],
      "task": "Run container with volume mount for data persistence",
      "solution": "docker run -d -v /host/data:/var/lib/mysql --name database mysql:latest",
      "explanation": "docker run -d (detached) -v /host/data:/var/lib/mysql (mount host directory /host/data to container path /var/lib/mysql) --name database (container name) mysql:latest. Persists database data on host filesystem.",
      "execution_time": "1-5 min",
      "requirements": ["docker"],
      "warnings": "Ensure host directory exists and has appropriate permissions",
      "use_case": "Data persistence and sharing files between host and container"
    },
    {
      "id": 322,
      "command": ["docker"],
      "difficulty": 3,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "exec", "access"],
      "task": "Execute command inside running container",
      "solution": "docker exec -it web bash",
      "explanation": "docker exec (execute command in running container) -i (interactive) -t (TTY) web (container name) bash (command to run). Provides shell access to running container for debugging and administration.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": "Type 'exit' to leave container shell",
      "use_case": "Container debugging, maintenance, and interactive administration"
    },
    {
      "id": 323,
      "command": ["docker"],
      "difficulty": 3,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "logs", "monitoring"],
      "task": "View container logs and follow in real-time",
      "solution": "docker logs -f web",
      "explanation": "docker logs (show container logs) -f (follow logs in real-time, like tail -f) web (container name). Shows stdout and stderr from container's main process.",
      "execution_time": "long-running",
      "requirements": ["docker"],
      "warnings": "Press Ctrl+C to stop following logs",
      "use_case": "Application debugging and real-time monitoring"
    },
    {
      "id": 324,
      "command": ["docker"],
      "difficulty": 3,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "inspect", "details"],
      "task": "Inspect detailed container configuration",
      "solution": "docker inspect web",
      "explanation": "docker inspect web (show detailed configuration and metadata for container named web). Returns JSON with all container settings, network configuration, volumes, environment variables, and runtime information.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Debugging container configuration and extracting runtime information"
    },
    {
      "id": 325,
      "command": ["docker"],
      "difficulty": 4,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "build", "dockerfile"],
      "task": "Build custom Docker image from Dockerfile",
      "solution": "docker build -t my-app:v1.0 .",
      "explanation": "docker build (build image from Dockerfile) -t my-app:v1.0 (tag image with name and version) . (build context - current directory containing Dockerfile). Creates custom image based on Dockerfile instructions.",
      "execution_time": "1-5 min",
      "requirements": ["docker", "Dockerfile"],
      "warnings": "Ensure Dockerfile exists in build context",
      "use_case": "Custom application deployment and image creation"
    },
    {
      "id": 326,
      "command": ["docker"],
      "difficulty": 4,
      "rating": 5,
      "category": "containers",
      "tags": ["docker", "environment", "variables"],
      "task": "Run container with environment variables and resource limits",
      "solution": "docker run -d -e NODE_ENV=production -e PORT=3000 --memory=512m --cpus=0.5 --name app my-app:v1.0",
      "explanation": "docker run -d (detached) -e NODE_ENV=production -e PORT=3000 (set environment variables) --memory=512m (limit memory to 512MB) --cpus=0.5 (limit to 0.5 CPU cores) --name app (container name) my-app:v1.0 (image). Configures container with environment and resource constraints.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Production deployment with resource management and configuration"
    },
    {
      "id": 327,
      "command": ["docker"],
      "difficulty": 4,
      "rating": 5,
      "category": "containers",
      "tags": ["docker", "network", "custom"],
      "task": "Create custom network and connect containers",
      "solution": "docker network create my-network && docker run -d --network my-network --name db mysql:latest && docker run -d --network my-network --name web nginx:latest",
      "explanation": "docker network create my-network (create custom bridge network) && docker run -d --network my-network --name db mysql:latest (run database container on custom network) && docker run -d --network my-network --name web nginx:latest (run web container on same network). Containers can communicate using container names as hostnames.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": null,
      "use_case": "Multi-container applications with isolated network communication"
    },
    {
      "id": 328,
      "command": ["docker"],
      "difficulty": 4,
      "rating": 4,
      "category": "containers",
      "tags": ["docker", "cleanup", "prune"],
      "task": "Clean up unused Docker resources",
      "solution": "docker system prune -a",
      "explanation": "docker system prune (remove unused Docker objects) -a (remove all unused images, not just dangling ones). Cleans up stopped containers, unused networks, unused images, and build cache to free disk space.",
      "execution_time": "< 1 min",
      "requirements": ["docker"],
      "warnings": "Will remove all unused Docker resources permanently",
      "use_case": "Disk space management and system cleanup"
    },
    {
      "id": 329,
      "command": ["docker"],
      "difficulty": 4,
      "rating": 5,
      "category": "containers",
      "tags": ["docker", "stats", "monitoring"],
      "task": "Monitor container resource usage in real-time",
      "solution": "docker stats",
      "explanation": "docker stats (display real-time resource usage statistics for all running containers). Shows CPU percentage, memory usage, memory limit, network I/O, and block I/O for each container, updated continuously.",
      "execution_time": "long-running",
      "requirements": ["docker"],
      "warnings": "Press Ctrl+C to stop monitoring",
      "use_case": "Performance monitoring and resource usage analysis"
    },
    {
      "id": 330,
      "command": ["docker"],
      "difficulty": 5,
      "rating": 5,
      "category": "containers",
      "tags": ["docker", "compose", "multi-container"],
      "task": "Deploy multi-container application with health checks",
      "solution": "echo 'version: \"3.8\"\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n  db:\n    image: mysql:latest\n    environment:\n      MYSQL_ROOT_PASSWORD: secret' > docker-compose.yml && docker-compose up -d",
      "explanation": "Create docker-compose.yml with web service (nginx with port mapping and health check using curl) and database service (mysql with environment variables). docker-compose up -d (start all services in detached mode). Health checks monitor service status automatically.",
      "execution_time": "1-5 min",
      "requirements": ["docker", "docker-compose"],
      "warnings": "Requires docker-compose to be installed",
      "use_case": "Production multi-service deployment with automated health monitoring"
    }
  ]
}