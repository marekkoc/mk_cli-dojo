[
  {
    "id": 461,
    "command": ["jq"],
    "difficulty": 1,
    "rating": 2,
    "category": "data analysis",
    "tags": ["json", "basic", "display"],
    "task": "Display formatted JSON from employees.json file",
    "solution": "jq '.' employees.json",
    "explanation": "jq '.' (dot means entire document) employees.json (input file) - displays formatted JSON with syntax highlighting",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Quick check of JSON file structure and formatting"
  },
  {
    "id": 462,
    "command": ["jq"],
    "difficulty": 1,
    "rating": 2,
    "category": "data analysis",
    "tags": ["json", "field", "extraction"],
    "task": "Extract company name from company.json file",
    "solution": "jq '.company_info.name' company.json",
    "explanation": "jq '.company_info.name' (access nested field using dot) company.json - extracts value of specific key",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Extracting specific values from configuration files"
  },
  {
    "id": 463,
    "command": ["jq"],
    "difficulty": 1,
    "rating": 2,
    "category": "data analysis",
    "tags": ["json", "array", "length"],
    "task": "Count how many employees are in employees.json file",
    "solution": "jq 'length' employees.json",
    "explanation": "jq 'length' (length function returns number of elements in array) employees.json - counts elements in main array",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Quick check of data collection size"
  },
  {
    "id": 464,
    "command": ["jq"],
    "difficulty": 1,
    "rating": 2,
    "category": "data analysis",
    "tags": ["json", "array", "first"],
    "task": "Display first employee from employees.json file",
    "solution": "jq '.[0]' employees.json",
    "explanation": "jq '.[0]' (index 0 means first array element) employees.json - extracts first object from array",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Checking structure of first record in dataset"
  },
  {
    "id": 465,
    "command": ["jq"],
    "difficulty": 1,
    "rating": 2,
    "category": "data analysis",
    "tags": ["json", "field", "all"],
    "task": "Display all employee names from employees.json file",
    "solution": "jq '.[].name' employees.json",
    "explanation": "jq '.[]' (iterate over all array elements) .name (extract name field from each object) - displays values of specific field for all records",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Extracting list of values from specific field"
  },
  {
    "id": 466,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "filter", "condition"],
    "task": "Find all employees from IT department in employees.json file",
    "solution": "jq '.[] | select(.department == \"IT\")' employees.json",
    "explanation": "jq '.[]' (iterate over elements) | (pipe passes data forward) select(.department == \"IT\") (filters objects where department equals IT)",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Filtering records by specific criteria"
  },
  {
    "id": 467,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "filter", "salary"],
    "task": "Find employees earning more than 10000 PLN",
    "solution": "jq '.[] | select(.salary > 10000)' employees.json",
    "explanation": "jq '.[] | select(.salary > 10000)' (select with numeric condition) - filters objects by numeric value",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Financial data analysis and value thresholds"
  },
  {
    "id": 468,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "map", "projection"],
    "task": "Create list containing only employee names and emails",
    "solution": "jq 'map({name: .name, email: .email})' employees.json",
    "explanation": "jq 'map()' (transforms each array element) {name: .name, email: .email} (creates new object with selected fields) - data projection",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Creating simplified data views for reports"
  },
  {
    "id": 469,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "sort", "salary"],
    "task": "Sort employees by salary from highest to lowest",
    "solution": "jq 'sort_by(.salary) | reverse' employees.json",
    "explanation": "jq 'sort_by(.salary)' (sorts by salary field ascending) | reverse (reverses order to descending) - sorting with reversal",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Ranking analysis of numeric data"
  },
  {
    "id": 470,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "unique", "departments"],
    "task": "Display unique department names from employees.json file",
    "solution": "jq '[.[].department] | unique' employees.json",
    "explanation": "jq '[.[].department]' (creates array of all department values) | unique (removes duplicates and sorts) - extracting unique values",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Analysis of unique values in dataset"
  },
  {
    "id": 471,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "count", "active"],
    "task": "Count how many active employees there are",
    "solution": "jq '[.[] | select(.active == true)] | length' employees.json",
    "explanation": "jq '[.[] | select(.active == true)]' (filters active and creates array) | length (counts elements) - counting with filtering",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Conditional statistics in data analysis"
  },
  {
    "id": 472,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "aggregate", "average"],
    "task": "Calculate average salary of all employees",
    "solution": "jq '[.[].salary] | add / length' employees.json",
    "explanation": "jq '[.[].salary]' (creates array of all salaries) | add (sums values) / length (divides by number of elements) - calculating arithmetic mean",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Basic descriptive statistics in data analysis"
  },
  {
    "id": 473,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "group", "department"],
    "task": "Group employees by departments",
    "solution": "jq 'group_by(.department)' employees.json",
    "explanation": "jq 'group_by(.department)' (groups elements by department field value) - creates array of grouped object arrays",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Data grouping for categorical analysis"
  },
  {
    "id": 474,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "nested", "skills"],
    "task": "Display all skills of all employees as flat list",
    "solution": "jq '[.[].skills[]] | unique' employees.json",
    "explanation": "jq '[.[].skills[]]' (extracts all elements from skills arrays and creates one array) | unique (removes duplicates) - flattening nested arrays",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Analysis of nested data collections"
  },
  {
    "id": 475,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "conditional", "age"],
    "task": "Add 'age_group' field to each employee (young: <30, middle: 30-40, senior: >40)",
    "solution": "jq 'map(. + {age_group: (if .age < 30 then \"young\" elif .age <= 40 then \"middle\" else \"senior\" end)})' employees.json",
    "explanation": "jq 'map()' (transforms each element) . + {} (adds new field to object) if-elif-else (conditional logic) - enriching data with calculated fields",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Creating categories and data segmentation"
  },
  {
    "id": 476,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "nested", "budget"],
    "task": "Find all employees who have projects with budget > 50000",
    "solution": "jq '.[] | select(.projects[] | select(.budget > 50000))' employees.json",
    "explanation": "jq '.[] | select()' (filters employees) .projects[] | select(.budget > 50000) (checks if project exists with budget > 50000) - filtering by nested conditions",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Searching records with nested criteria"
  },
  {
    "id": 477,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "max", "performance"],
    "task": "Find employee with highest performance_score",
    "solution": "jq 'max_by(.performance_score)' employees.json",
    "explanation": "jq 'max_by(.performance_score)' (finds object with maximum value of specified field) - finding record with maximum value",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Identifying best performers in data analysis"
  },
  {
    "id": 478,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "contains", "skills"],
    "task": "Find employees who know Python",
    "solution": "jq '.[] | select(.skills | contains([\"Python\"]))' employees.json",
    "explanation": "jq '.[] | select()' (filters employees) .skills | contains([\"Python\"]) (checks if skills array contains Python) - searching in arrays",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Searching for competencies in team"
  },
  {
    "id": 479,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "aggregate", "department", "complex"],
    "task": "Create report showing average salary in each department",
    "solution": "jq 'group_by(.department) | map({department: .[0].department, avg_salary: (map(.salary) | add / length), count: length})' employees.json",
    "explanation": "group_by(.department) (groups by department) | map() (transforms each group) .[0].department (department name from first element) map(.salary) | add / length (average salary in group) - group aggregation",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Creating analytical reports with aggregations"
  },
  {
    "id": 480,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "join", "cross-reference"],
    "task": "Compare department budgets from company.json with actual average salaries from employees.json",
    "solution": "jq -s '.[1].departments as $depts | .[0] | group_by(.department) | map({department: .[0].department, real_avg: (map(.salary) | add / length), planned_avg: $depts[.[0].department].avg_salary})' employees.json company.json",
    "explanation": "-s (slurp - loads files into array) .[1].departments as $depts (assigns departments to variable) .[0] (first file) group_by (groups) $depts[.[0].department] (variable reference) - joining data from two files",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Comparing data from different sources"
  },
  {
    "id": 481,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "flatten", "projects"],
    "task": "Create flat list of all projects with employee information",
    "solution": "jq '[.[] as $emp | $emp.projects[] | . + {employee_name: $emp.name, employee_id: $emp.id}]' employees.json",
    "explanation": ".[] as $emp (assigns employee to variable) $emp.projects[] (iterates over projects) . + {} (adds fields to project object) $emp.name (variable reference) - flattening nested structures with context",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Data denormalization for project analysis"
  },
  {
    "id": 482,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "statistics", "quartiles"],
    "task": "Calculate quartiles (Q1, Q2, Q3) for employee salaries",
    "solution": "jq '[.[].salary] | sort | length as $len | {q1: .[$len/4 | floor], q2: .[$len/2 | floor], q3: .[3*$len/4 | floor], min: .[0], max: .[-1]}' employees.json",
    "explanation": "sort (sorts salaries) length as $len (saves length) [$len/4 | floor] (calculates quartile index) .[] (element access) - calculating statistical quartiles",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Statistical analysis of salary distribution"
  },
  {
    "id": 483,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "pivot", "skills"],
    "task": "Create pivot table showing how many people in each department know each skill",
    "solution": "jq '[.[].skills[]] | unique as $all_skills | group_by(.department) | map({department: .[0].department} + ($all_skills | map({(\"skill_\" + .): (map(select(.skills | contains([.]))) | length)}) | add))' employees.json",
    "explanation": "unique as $all_skills (all unique skills) group_by(.department) (grouping by departments) map(select(.skills | contains([.]))) (filtering by skills) - creating pivot table",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Skills analysis across organizational units"
  },
  {
    "id": 484,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "keys", "structure"],
    "task": "Display all keys of main object in company.json",
    "solution": "jq 'keys' company.json",
    "explanation": "jq 'keys' (returns sorted array of all object keys) - data structure exploration",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Analysis of unknown JSON file structure"
  },
  {
    "id": 485,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "nested", "quarterly"],
    "task": "Display revenue from all quarters in company.json",
    "solution": "jq '.quarterly_results[].revenue' company.json",
    "explanation": "jq '.quarterly_results[]' (iterates over all quarters) .revenue (extracts revenue) - accessing nested arrays",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Extracting financial data for trend analysis"
  },
  {
    "id": 486,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "sum", "total"],
    "task": "Calculate total annual revenue from all quarters",
    "solution": "jq '[.quarterly_results[].revenue] | add' company.json",
    "explanation": "[.quarterly_results[].revenue] (creates array of all revenues) | add (sums values) - numeric aggregation",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Calculating annual totals in financial analysis"
  },
  {
    "id": 487,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "filter", "profit"],
    "task": "Find quarters with profit greater than 600000",
    "solution": "jq '.quarterly_results[] | select(.profit > 600000)' company.json",
    "explanation": ".quarterly_results[] (iterates over quarters) | select(.profit > 600000) (filters by profit) - filtering with numeric condition",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Identifying high profitability periods"
  },
  {
    "id": 488,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "best", "quarter"],
    "task": "Find quarter with highest profit",
    "solution": "jq '.quarterly_results | max_by(.profit)' company.json",
    "explanation": ".quarterly_results (quarters array) | max_by(.profit) (finds element with maximum profit) - finding record with maximum value",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Identifying best business periods"
  },
  {
    "id": 489,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "languages", "popular"],
    "task": "Display programming languages sorted by popularity",
    "solution": "jq '.technologies.programming_languages | sort_by(.popularity) | reverse' company.json",
    "explanation": ".technologies.programming_languages (access nested array) sort_by(.popularity) (sorts by popularity) reverse (reverses to descending) - sorting nested objects",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Technology ranking by adoption"
  },
  {
    "id": 490,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "cloud", "costs"],
    "task": "Calculate total monthly cloud costs and show percentage share of each provider",
    "solution": "jq '.technologies.cloud_providers | to_entries | map(.value.monthly_cost) | add as $total | .technologies.cloud_providers | to_entries | map({provider: .key, cost: .value.monthly_cost, percentage: ((.value.monthly_cost / $total) * 100 | round)})' company.json",
    "explanation": "to_entries (converts object to key-value pair array) map(.value.monthly_cost) | add as $total (calculates cost sum) (.value.monthly_cost / $total) * 100 (percentage share) - object transformation and percentage calculations",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Cloud infrastructure cost analysis"
  },
  {
    "id": 491,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "office", "density"],
    "task": "Calculate employee density (employees/m²) for each office",
    "solution": "jq '.office_locations | map({city: .city, employees: .employees, area: .square_meters, density: (.employees / .square_meters | . * 100 | round | . / 100)})' company.json",
    "explanation": "map() (transforms each office) (.employees / .square_meters) (calculates density) . * 100 | round | . / 100 (rounds to 2 decimal places) - calculations with formatting",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Office space utilization efficiency analysis"
  },
  {
    "id": 492,
    "command": ["jq"],
    "difficulty": 2,
    "rating": 3,
    "category": "data analysis",
    "tags": ["json", "certificates", "expiring"],
    "task": "Display names of certificates expiring in 2024",
    "solution": "jq '.certifications[] | select(.valid_until | contains(\"2024\")) | .name' company.json",
    "explanation": ".certifications[] (iterates over certificates) select(.valid_until | contains(\"2024\")) (filters by year) .name (extracts name) - string filtering by pattern",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Monitoring expiring certifications and licenses"
  },
  {
    "id": 493,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "partners", "count"],
    "task": "Count total number of all company partners",
    "solution": "jq '.partnerships | [.technology_partners[], .consulting_partners[], .integration_partners[]] | length' company.json",
    "explanation": ".partnerships (partnerships object) [.technology_partners[], .consulting_partners[], .integration_partners[]] (combines all partner arrays) length (counts elements) - combining multiple arrays",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Company partnership network analysis"
  },
  {
    "id": 494,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "growth", "trend"],
    "task": "Calculate revenue growth trend between quarters (percentage growth)",
    "solution": "jq '.quarterly_results | [.[1:][]] as $later | [.[:3][]] as $earlier | [$earlier, $later] | transpose | map({from: .[0].quarter, to: .[1].quarter, growth: ((.[1].revenue - .[0].revenue) / .[0].revenue * 100 | round)})' company.json",
    "explanation": "[.[1:][]] (quarters from second) [.[:3][]] (first three quarters) transpose (pairs them) ((.[1].revenue - .[0].revenue) / .[0].revenue * 100) (calculates percentage growth) - time series trend analysis",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Business growth dynamics analysis"
  },
  {
    "id": 495,
    "command": ["jq"],
    "difficulty": 5,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "complex", "dashboard"],
    "task": "Create comprehensive dashboard with key company metrics",
    "solution": "jq '{company: .company_info.name, total_employees: .company_info.employees_count, annual_revenue: ([.quarterly_results[].revenue] | add), annual_profit: ([.quarterly_results[].profit] | add), profit_margin: (([.quarterly_results[].profit] | add) / ([.quarterly_results[].revenue] | add) * 100 | round), departments_count: (.departments | keys | length), top_technology: (.technologies.programming_languages | max_by(.popularity) | .name), main_office: (.office_locations[] | select(.type == \"headquarters\") | .city)}' company.json",
    "explanation": "Complex expression combining multiple operations: sums, averages, maxima, filtering and accessing nested structures - creating business dashboard",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Creating executive dashboards with key KPIs"
  },
  {
    "id": 496,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "framework", "satisfaction"],
    "task": "Find framework with highest user satisfaction",
    "solution": "jq '.technologies.frameworks | max_by(.satisfaction)' company.json",
    "explanation": ".technologies.frameworks (access nested array) max_by(.satisfaction) (finds element with maximum satisfaction) - finding maximum in nested structures",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Technology satisfaction analysis for team"
  },
  {
    "id": 497,
    "command": ["jq"],
    "difficulty": 3,
    "rating": 4,
    "category": "data analysis",
    "tags": ["json", "conditional", "branch"],
    "task": "Add 'office_size' field to each office (small: <1000m², medium: 1000-2000m², large: >2000m²)",
    "solution": "jq '.office_locations | map(. + {office_size: (if .square_meters < 1000 then \"small\" elif .square_meters <= 2000 then \"medium\" else \"large\" end)})' company.json",
    "explanation": "map(. + {}) (adds field to each object) if-elif-else (conditional logic) - categorizing numeric data",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Resource segmentation by size"
  },
  {
    "id": 498,
    "command": ["jq"],
    "difficulty": 4,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "variance", "statistics"],
    "task": "Calculate variance of quarterly revenues",
    "solution": "jq '.quarterly_results | map(.revenue) as $revenues | ($revenues | add / length) as $mean | ($revenues | map(. - $mean | . * .) | add / length) as $variance | {mean: $mean, variance: $variance, std_dev: ($variance | sqrt | . * 100 | round | . / 100)}' company.json",
    "explanation": "map(.revenue) as $revenues (extracts revenues) add / length as $mean (calculates mean) map(. - $mean | . * .) (squares of deviations) sqrt (square root for standard deviation) - advanced statistical calculations",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Financial results variability analysis"
  },
  {
    "id": 499,
    "command": ["jq"],
    "difficulty": 5,
    "rating": 5,
    "category": "data analysis",
    "tags": ["json", "correlation", "complex"],
    "task": "Find correlation between number of new employees and profit in quarters",
    "solution": "jq '.quarterly_results | length as $n | map(.new_employees) as $x | map(.profit) as $y | (($x | add) / $n) as $mean_x | (($y | add) / $n) as $mean_y | ([range($n) | $x[.] * $y[.]] | add) as $sum_xy | ([range($n) | $x[.] * $x[.]] | add) as $sum_x2 | ([range($n) | $y[.] * $y[.]] | add) as $sum_y2 | (($sum_xy - $n * $mean_x * $mean_y) / (($sum_x2 - $n * $mean_x * $mean_x) * ($sum_y2 - $n * $mean_y * $mean_y) | sqrt)) as $correlation | {correlation: ($correlation * 1000 | round | . / 1000), interpretation: (if $correlation > 0.7 then \"strong positive\" elif $correlation > 0.3 then \"moderate positive\" elif $correlation > -0.3 then \"weak\" elif $correlation > -0.7 then \"moderate negative\" else \"strong negative\" end)}' company.json",
    "explanation": "Implementation of Pearson correlation formula: calculating means, sums of products, sums of squares and final correlation coefficient - advanced statistical analysis",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Analysis of relationships between business variables"
  },
  {
    "id": 500,
    "command": ["jq"],
    "difficulty": 1,
    "rating": 2,
    "category": "data analysis",
    "tags": ["json", "pretty", "compact"],
    "task": "Display company.json in compact format (without indentation)",
    "solution": "jq -c '.' company.json",
    "explanation": "jq -c (compact output - format without indentation and spaces) '.' (entire document) - JSON output formatting",
    "execution_time": "< 1 min",
    "requirements": ["jq"],
    "warnings": null,
    "use_case": "Minimizing JSON size for network transmission"
  }
]