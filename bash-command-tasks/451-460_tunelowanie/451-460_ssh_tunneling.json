{
  "tasks": [
    {
      "id": 451,
      "command": ["ssh"],
      "difficulty": 2,
      "rating": 3,
      "category": "networking",
      "tags": ["port-forwarding", "local", "web-server"],
      "task": "Create SSH local port forwarding to access remote web server on localhost",
      "solution": "ssh -L 8080:localhost:80 user@remote-server",
      "explanation": "ssh -L 8080:localhost:80 (local port forwarding: bind local port 8080 to remote localhost:80) user@remote-server (SSH connection). After connection, access http://localhost:8080 to reach remote web server",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "remote-server-access"],
      "warnings": null,
      "use_case": "Access web applications running on remote servers through secure tunnel"
    },
    {
      "id": 452,
      "command": ["ssh"],
      "difficulty": 3,
      "rating": 4,
      "category": "networking",
      "tags": ["reverse-tunnel", "remote-forwarding", "firewall-bypass"],
      "task": "Create SSH reverse tunnel to expose local service to remote server",
      "solution": "ssh -R 9000:localhost:3000 user@public-server",
      "explanation": "ssh -R 9000:localhost:3000 (reverse/remote port forwarding: bind remote port 9000 to local localhost:3000) user@public-server. Remote server can access local service via port 9000",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "public-server-access"],
      "warnings": "Exposes local service to remote network",
      "use_case": "Share local development server with team or bypass firewall restrictions"
    },
    {
      "id": 453,
      "command": ["ssh"],
      "difficulty": 3,
      "rating": 4,
      "category": "networking",
      "tags": ["dynamic-forwarding", "socks-proxy", "proxy-server"],
      "task": "Set up SSH dynamic port forwarding as SOCKS proxy",
      "solution": "ssh -D 1080 user@proxy-server",
      "explanation": "ssh -D 1080 (dynamic port forwarding: create SOCKS proxy on port 1080) user@proxy-server. Configure applications to use localhost:1080 as SOCKS proxy to route traffic through SSH tunnel",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "proxy-server-access"],
      "warnings": null,
      "use_case": "Secure web browsing through encrypted tunnel or bypass geo-restrictions"
    },
    {
      "id": 454,
      "command": ["ssh"],
      "difficulty": 2,
      "rating": 3,
      "category": "networking",
      "tags": ["database", "mysql", "secure-connection"],
      "task": "Create SSH tunnel to securely connect to remote MySQL database",
      "solution": "ssh -L 3306:localhost:3306 -N user@db-server",
      "explanation": "ssh -L 3306:localhost:3306 (forward local MySQL port to remote MySQL) -N (don't execute remote command, just tunnel) user@db-server. Connect MySQL client to localhost:3306",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "mysql-client"],
      "warnings": null,
      "use_case": "Secure database administration without exposing database ports to internet"
    },
    {
      "id": 455,
      "command": ["ssh"],
      "difficulty": 4,
      "rating": 4,
      "category": "networking",
      "tags": ["multi-hop", "jump-server", "bastion"],
      "task": "Create multi-hop SSH tunnel through bastion host to internal server",
      "solution": "ssh -L 8080:internal-server:80 -J bastion-host user@internal-server",
      "explanation": "ssh -L 8080:internal-server:80 (forward local port 8080 to internal server port 80) -J bastion-host (jump through bastion host) user@internal-server. Access internal service via localhost:8080",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "bastion-access", "internal-server-access"],
      "warnings": null,
      "use_case": "Access services in private networks through jump servers in cloud environments"
    },
    {
      "id": 456,
      "command": ["ssh"],
      "difficulty": 3,
      "rating": 3,
      "category": "networking",
      "tags": ["persistent", "autossh", "background"],
      "task": "Create persistent SSH tunnel that automatically reconnects on failure",
      "solution": "autossh -M 20000 -L 8080:localhost:80 -N -f user@remote-server",
      "explanation": "autossh -M 20000 (monitoring port for connection health) -L 8080:localhost:80 (local port forwarding) -N (no remote command) -f (background process) user@remote-server. Auto-reconnects if connection drops",
      "execution_time": "< 1 min",
      "requirements": ["autossh", "ssh-client"],
      "warnings": null,
      "use_case": "Maintain stable long-running tunnels for production services"
    },
    {
      "id": 457,
      "command": ["ssh"],
      "difficulty": 4,
      "rating": 5,
      "category": "networking",
      "tags": ["x11-forwarding", "gui", "remote-desktop"],
      "task": "Forward X11 GUI applications through SSH tunnel with compression",
      "solution": "ssh -X -C user@remote-server && export DISPLAY=localhost:10.0",
      "explanation": "ssh -X (enable X11 forwarding) -C (enable compression for better performance) user@remote-server && export DISPLAY=localhost:10.0 (set display variable). Run GUI apps on remote server, display locally",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "x11-server", "remote-x11-apps"],
      "warnings": "May have security implications, use trusted servers only",
      "use_case": "Run remote GUI applications like IDEs, image editors, or scientific software"
    },
    {
      "id": 458,
      "command": ["ssh"],
      "difficulty": 3,
      "rating": 4,
      "category": "networking",
      "tags": ["file-transfer", "scp", "secure-copy"],
      "task": "Transfer files through SSH tunnel with progress and compression",
      "solution": "scp -C -r -v local_directory/ user@remote-server:/remote/path/",
      "explanation": "scp -C (enable compression) -r (recursive for directories) -v (verbose output with progress) local_directory/ (source directory) user@remote-server:/remote/path/ (destination path on remote server)",
      "execution_time": "1-5 min",
      "requirements": ["ssh-client", "scp"],
      "warnings": null,
      "use_case": "Securely transfer files and directories between local and remote systems"
    },
    {
      "id": 459,
      "command": ["ssh"],
      "difficulty": 4,
      "rating": 4,
      "category": "networking",
      "tags": ["port-knocking", "security", "stealth"],
      "task": "Connect to SSH server protected by port knocking sequence",
      "solution": "for port in 1234 5678 9012; do nc -z target-server $port; done && ssh user@target-server",
      "explanation": "for port in 1234 5678 9012; do nc -z target-server $port; done (send port knocking sequence using netcat to specific ports) && ssh user@target-server (connect to SSH after knocking sequence opens the port)",
      "execution_time": "< 1 min",
      "requirements": ["ssh-client", "netcat", "port-knocking-server"],
      "warnings": "Requires exact port sequence, timing may be critical",
      "use_case": "Connect to high-security servers with additional port-based authentication"
    },
    {
      "id": 460,
      "command": ["ssh"],
      "difficulty": 5,
      "rating": 5,
      "category": "networking",
      "tags": ["vpn", "tun-device", "layer3"],
      "task": "Create SSH-based VPN tunnel using TUN device for full network routing",
      "solution": "sudo ssh -o Tunnel=point-to-point -o TunnelDevice=5:5 -w 5:5 root@vpn-server && sudo ip addr add 10.0.0.1/30 dev tun5 && sudo ip route add 192.168.1.0/24 dev tun5",
      "explanation": "sudo ssh -o Tunnel=point-to-point (enable tunnel mode) -o TunnelDevice=5:5 (use TUN device 5 on both ends) -w 5:5 (forward TUN devices) root@vpn-server && sudo ip addr add 10.0.0.1/30 dev tun5 (assign IP to tunnel) && sudo ip route add 192.168.1.0/24 dev tun5 (route network through tunnel)",
      "execution_time": "1-5 min",
      "requirements": ["ssh-client", "root-access", "tun-device-support"],
      "warnings": "Requires root privileges and TUN/TAP support on both systems",
      "use_case": "Create full network-layer VPN for routing entire subnets through SSH tunnel"
    }
  ]
}