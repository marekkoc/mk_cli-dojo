{
  "tasks": [
    {
      "id": 101,
      "command": ["awk"],
      "difficulty": 4,
      "rating": 4,
      "category": "text processing",
      "tags": ["line numbers", "formatting", "output"],
      "task": "Add line numbers to text file with custom formatting",
      "solution": "awk '{printf \"%3d: %s\\n\", NR, $0}' file.txt",
      "explanation": "awk '{printf '%3d: %s\\n', NR, $0}' (format output with printf) '%3d:' (3-digit right-aligned number) NR (built-in variable: Number of Records/line number) $0 (entire line) file.txt. Creates formatted line numbers.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Add formatted line numbers for code review or documentation"
    },
    {
      "id": 102,
      "command": ["awk"],
      "difficulty": 5,
      "rating": 5,
      "category": "data analysis",
      "tags": ["patterns", "ranges", "processing"],
      "task": "Process lines between two patterns and perform calculations",
      "solution": "awk '/START/,/END/ {sum += $2} END {print \"Sum between patterns:\", sum}' data.txt",
      "explanation": "awk '/START/,/END/' (range pattern: process lines from START to END pattern) '{sum += $2}' (accumulate second field) END {print 'Sum between patterns:', sum} (after processing, print total). Range patterns enable section-specific processing.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Extract and analyze data from specific sections of log files"
    },
    {
      "id": 103,
      "command": ["chmod"],
      "difficulty": 2,
      "rating": 2,
      "category": "security",
      "tags": ["permissions", "security", "access"],
      "task": "Make a script executable for owner, readable for group and others",
      "solution": "chmod 744 script.sh",
      "explanation": "chmod 744 (octal permission notation: 7=rwx for owner, 4=r-- for group, 4=r-- for others) script.sh. Permission bits: read(4) + write(2) + execute(1). Owner gets full access (7), group and others get read-only (4).",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Set proper permissions for shell scripts and executables"
    },
    {
      "id": 104,
      "command": ["chmod"],
      "difficulty": 3,
      "rating": 3,
      "category": "security",
      "tags": ["recursive", "directories", "permissions"],
      "task": "Recursively change permissions for all files and directories",
      "solution": "chmod -R 755 /path/to/directory",
      "explanation": "chmod -R (recursive - apply to directory and all contents) 755 (rwxr-xr-x: owner full access, group and others read+execute) /path/to/directory. Standard web server permissions: directories need execute to be traversable.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Be careful with recursive permission changes",
      "use_case": "Set standard web directory permissions for Apache/Nginx"
    },
    {
      "id": 105,
      "command": ["chown"],
      "difficulty": 2,
      "rating": 3,
      "category": "security",
      "tags": ["ownership", "user", "group"],
      "task": "Change file owner to specific user and group",
      "solution": "chown user:group filename.txt",
      "explanation": "chown user:group (change owner to 'user' and group to 'group', colon separates user from group) filename.txt. Can use just user (keeps current group) or :group (keeps current user). Requires appropriate privileges.",
      "execution_time": "< 1 min",
      "requirements": ["sudo privileges"],
      "warnings": "Requires appropriate permissions to change ownership",
      "use_case": "Transfer file ownership after copying or creating files as root"
    },
    {
      "id": 106,
      "command": ["chown", "find"],
      "difficulty": 4,
      "rating": 4,
      "category": "security",
      "tags": ["batch", "ownership", "recursive"],
      "task": "Change ownership of all files belonging to specific user",
      "solution": "find /path -user olduser -exec chown newuser:newgroup {} \\;",
      "explanation": "find /path -user olduser (find all files owned by olduser) -exec chown newuser:newgroup {} \\; (change ownership to newuser:newgroup for each found file). Useful for user account migration or bulk ownership changes.",
      "execution_time": "1-5 min",
      "requirements": ["sudo privileges"],
      "warnings": "Test on small directory first, can affect system files",
      "use_case": "User account migration and bulk ownership changes"
    },
    {
      "id": 107,
      "command": ["useradd"],
      "difficulty": 3,
      "rating": 3,
      "category": "system admin",
      "tags": ["user management", "account", "creation"],
      "task": "Create new user with home directory and specific shell",
      "solution": "useradd -m -s /bin/bash newuser",
      "explanation": "useradd -m (create home directory) -s /bin/bash (set default shell to bash) newuser. Creates user account with home directory, sets shell, and adds entry to /etc/passwd. Additional setup like password setting needed separately.",
      "execution_time": "< 1 min",
      "requirements": ["sudo privileges"],
      "warnings": null,
      "use_case": "System administration and user account provisioning"
    },
    {
      "id": 108,
      "command": ["groupadd", "usermod"],
      "difficulty": 3,
      "rating": 4,
      "category": "system admin",
      "tags": ["group management", "user groups", "permissions"],
      "task": "Create new group and add existing user to it",
      "solution": "groupadd developers && usermod -aG developers username",
      "explanation": "groupadd developers (create new group named 'developers') && usermod -aG developers username (if successful, add username to developers group with -a append and -G supplementary group). Enables role-based access control.",
      "execution_time": "< 1 min",
      "requirements": ["sudo privileges"],
      "warnings": null,
      "use_case": "Role-based access control and permission management"
    },
    {
      "id": 109,
      "command": ["id"],
      "difficulty": 2,
      "rating": 2,
      "category": "system admin",
      "tags": ["user info", "groups", "identity"],
      "task": "Display current user ID and all group memberships",
      "solution": "id",
      "explanation": "id (show user and group IDs for current user). Displays UID (user ID), GID (primary group ID), and all supplementary groups with both numeric IDs and names. Essential for troubleshooting permission issues.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Verify user identity and group memberships for troubleshooting"
    },
    {
      "id": 110,
      "command": ["groups", "getent"],
      "difficulty": 3,
      "rating": 3,
      "category": "system admin",
      "tags": ["group info", "membership", "system"],
      "task": "List all groups and find members of specific group",
      "solution": "getent group | grep groupname",
      "explanation": "getent group (get entries from group database - includes local and network groups) | grep groupname (filter for specific group). Shows group info including GID and member list. More comprehensive than /etc/group.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "System audit and group membership verification"
    },
    {
      "id": 111,
      "command": ["jobs"],
      "difficulty": 2,
      "rating": 3,
      "category": "system admin",
      "tags": ["background", "processes", "job control"],
      "task": "List all active background jobs with their status",
      "solution": "jobs -l",
      "explanation": "jobs -l (list jobs with process IDs). Shows background jobs started in current shell session with job number, status (Running, Stopped, Done), and PID. Jobs are shell-specific background processes.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Monitor and manage background processes in shell session"
    },
    {
      "id": 112,
      "command": ["jobs", "bg", "fg"],
      "difficulty": 3,
      "rating": 4,
      "category": "system admin",
      "tags": ["job control", "foreground", "background"],
      "task": "Move stopped job to background and then bring it to foreground",
      "solution": "jobs && bg %1 && fg %1",
      "explanation": "jobs (list current jobs to see job numbers) && bg %1 (move job #1 to background, continuing execution) && fg %1 (bring job #1 to foreground). %N refers to job number. Demonstrates job control workflow.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Interactive job management during development and system tasks"
    },
    {
      "id": 113,
      "command": ["kill"],
      "difficulty": 2,
      "rating": 3,
      "category": "system admin",
      "tags": ["process", "termination", "signals"],
      "task": "Gracefully terminate process by PID using TERM signal",
      "solution": "kill -TERM 1234",
      "explanation": "kill -TERM 1234 (send TERM signal to process ID 1234). TERM (15) is default signal for graceful shutdown - allows process to clean up and save data. Alternative to KILL (-9) which forces immediate termination.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Verify PID before killing to avoid terminating wrong process",
      "use_case": "Clean shutdown of unresponsive applications"
    },
    {
      "id": 114,
      "command": ["kill", "ps"],
      "difficulty": 3,
      "rating": 4,
      "category": "system admin",
      "tags": ["process", "kill by name", "pattern"],
      "task": "Find and kill all processes matching specific name pattern",
      "solution": "ps aux | grep process_name | grep -v grep | awk '{print $2}' | xargs kill",
      "explanation": "ps aux (list all processes) | grep process_name (filter by name) | grep -v grep (exclude grep itself) | awk '{print $2}' (extract PID column) | xargs kill (pass PIDs to kill command). Pipeline approach to kill by name.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Double-check process list before killing",
      "use_case": "Clean up multiple instances of stuck applications"
    },
    {
      "id": 115,
      "command": ["killall"],
      "difficulty": 2,
      "rating": 3,
      "category": "system admin",
      "tags": ["process", "kill by name", "bulk"],
      "task": "Kill all processes with specific name using killall",
      "solution": "killall firefox",
      "explanation": "killall firefox (terminate all processes with exact name 'firefox'). More direct than ps/grep pipeline but less flexible. Sends TERM signal by default. Use killall -9 for forceful termination if needed.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Will kill ALL processes with that name",
      "use_case": "Quick termination of all instances of specific application"
    },
    {
      "id": 116,
      "command": ["ps"],
      "difficulty": 2,
      "rating": 2,
      "category": "monitoring",
      "tags": ["processes", "system", "running"],
      "task": "Display all running processes with detailed information",
      "solution": "ps aux",
      "explanation": "ps aux (a = all users' processes, u = user-oriented format with owner info, x = include processes without controlling terminal). Shows PID, CPU%, memory%, start time, command. Standard process listing format.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "System monitoring and process analysis"
    },
    {
      "id": 117,
      "command": ["ps", "sort"],
      "difficulty": 3,
      "rating": 4,
      "category": "monitoring",
      "tags": ["memory", "cpu", "resource usage"],
      "task": "Show top 10 processes consuming most memory",
      "solution": "ps aux --sort=-%mem | head -11",
      "explanation": "ps aux (detailed process list) --sort=-%mem (sort by memory usage, - prefix for descending order) | head -11 (show first 11 lines including header). Identifies memory-intensive processes for optimization or troubleshooting.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Identify memory-intensive processes for optimization"
    },
    {
      "id": 118,
      "command": ["ps", "grep"],
      "difficulty": 2,
      "rating": 3,
      "category": "monitoring",
      "tags": ["filtering", "specific process", "search"],
      "task": "Find specific process and display its details",
      "solution": "ps aux | grep process_name",
      "explanation": "ps aux (list all processes with details) | grep process_name (filter lines containing process_name). Simple way to check if specific application is running and see its resource usage, PID, and other details.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Check if specific application is running and get its details"
    },
    {
      "id": 119,
      "command": ["md5sum"],
      "difficulty": 2,
      "rating": 3,
      "category": "security",
      "tags": ["checksum", "integrity", "verification"],
      "task": "Calculate MD5 checksum of file for integrity verification",
      "solution": "md5sum important_file.iso",
      "explanation": "md5sum important_file.iso (calculate MD5 hash of file). Produces 32-character hexadecimal hash that changes if file is modified. Compare with known good checksum to verify file integrity after downloads or transfers.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Verify file integrity after download or transfer"
    },
    {
      "id": 120,
      "command": ["md5sum"],
      "difficulty": 3,
      "rating": 4,
      "category": "security",
      "tags": ["batch", "checksum", "verification"],
      "task": "Create checksum file for all files in directory and verify later",
      "solution": "md5sum *.txt > checksums.md5 && md5sum -c checksums.md5",
      "explanation": "md5sum *.txt > checksums.md5 (calculate checksums for all .txt files, save to file) && md5sum -c checksums.md5 (verify all checksums in file). Two-phase process: create reference checksums, then verify integrity.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Backup verification and file integrity monitoring"
    },
    {
      "id": 121,
      "command": ["sha256sum", "md5sum"],
      "difficulty": 3,
      "rating": 4,
      "category": "security",
      "tags": ["multiple hash", "security", "comparison"],
      "task": "Compare MD5 and SHA256 checksums of same file",
      "solution": "md5sum file.dat && sha256sum file.dat",
      "explanation": "md5sum file.dat (calculate MD5 hash) && sha256sum file.dat (calculate SHA256 hash). SHA256 is more secure than MD5 but slower. Using both provides stronger verification and compatibility with different systems.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Enhanced security verification with multiple hash algorithms"
    },
    {
      "id": 122,
      "command": ["zip"],
      "difficulty": 2,
      "rating": 2,
      "category": "backup",
      "tags": ["compression", "archive", "zip"],
      "task": "Create password-protected ZIP archive of directory",
      "solution": "zip -r -P password archive.zip directory/",
      "explanation": "zip -r (recursive - include subdirectories) -P password (set password for encryption) archive.zip (output filename) directory/ (source directory). Creates encrypted ZIP compatible with most systems.",
      "execution_time": "1-5 min",
      "requirements": ["zip"],
      "warnings": "Password will be visible in command history",
      "use_case": "Secure file sharing and backup with password protection"
    },
    {
      "id": 123,
      "command": ["unzip"],
      "difficulty": 2,
      "rating": 2,
      "category": "backup",
      "tags": ["decompression", "extraction", "zip"],
      "task": "Extract ZIP archive and list contents without extracting",
      "solution": "unzip -l archive.zip && unzip archive.zip",
      "explanation": "unzip -l archive.zip (list contents without extracting - safe preview) && unzip archive.zip (if list looks good, extract all files). Two-step process ensures you know what will be extracted before doing it.",
      "execution_time": "1-5 min",
      "requirements": ["unzip"],
      "warnings": null,
      "use_case": "Safe archive inspection before extraction"
    },
    {
      "id": 124,
      "command": ["gzip", "gunzip"],
      "difficulty": 2,
      "rating": 3,
      "category": "backup",
      "tags": ["compression", "gzip", "space saving"],
      "task": "Compress large file and then decompress it",
      "solution": "gzip large_file.txt && gunzip large_file.txt.gz",
      "explanation": "gzip large_file.txt (compress file, replaces original with .gz version) && gunzip large_file.txt.gz (decompress back to original). gzip provides good compression for text files and is widely supported.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Space-efficient storage of large text files and logs"
    },
    {
      "id": 125,
      "command": ["tar", "gzip"],
      "difficulty": 3,
      "rating": 4,
      "category": "backup",
      "tags": ["archive", "compression", "backup"],
      "task": "Create compressed tar archive with progress indication",
      "solution": "tar -czf backup.tar.gz --verbose directory/",
      "explanation": "tar -c (create) -z (gzip compression) -f backup.tar.gz (filename) --verbose (show files being processed) directory/ (source). Combines archiving and compression in one step with visual feedback.",
      "execution_time": "5+ min",
      "requirements": null,
      "warnings": null,
      "use_case": "Professional backup creation with compression and progress tracking"
    },
    {
      "id": 126,
      "command": ["df"],
      "difficulty": 1,
      "rating": 2,
      "category": "monitoring",
      "tags": ["disk space", "filesystem", "usage"],
      "task": "Display available disk space in human-readable format",
      "solution": "df -h",
      "explanation": "df -h (disk free with human-readable sizes using K, M, G, T suffixes). Shows filesystem, total size, used space, available space, usage percentage, and mount point for all mounted filesystems.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Regular system monitoring and disk space management"
    },
    {
      "id": 127,
      "command": ["df"],
      "difficulty": 2,
      "rating": 3,
      "category": "monitoring",
      "tags": ["disk usage", "percentage", "alerts"],
      "task": "Show disk usage percentage and highlight filesystems over 80% full",
      "solution": "df -h | awk '$5 > 80 {print \"WARNING: \" $0}'",
      "explanation": "df -h (disk usage in human format) | awk '$5 > 80' (check if 5th column - usage percentage > 80%) '{print 'WARNING: ' $0}' (print warning with full line). Automated monitoring for disk space alerts.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Automated disk space monitoring and alerting"
    },
    {
      "id": 128,
      "command": ["du"],
      "difficulty": 2,
      "rating": 3,
      "category": "monitoring",
      "tags": ["directory size", "disk usage", "analysis"],
      "task": "Show size of each subdirectory in current location",
      "solution": "du -sh */",
      "explanation": "du -s (summarize - don't show subdirectories) -h (human-readable sizes) */ (all directories in current location). Provides size summary for each top-level directory without recursive details.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Identify which directories consume most disk space"
    },
    {
      "id": 129,
      "command": ["du", "sort"],
      "difficulty": 3,
      "rating": 4,
      "category": "monitoring",
      "tags": ["largest directories", "sorting", "analysis"],
      "task": "Find and display 10 largest directories recursively",
      "solution": "du -h | sort -hr | head -10",
      "explanation": "du -h (disk usage with human-readable sizes for all directories) | sort -hr (sort human-numeric reverse - largest first) | head -10 (show top 10). Identifies space-consuming directories for cleanup planning.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Disk cleanup planning and storage optimization"
    },
    {
      "id": 130,
      "command": ["du", "find"],
      "difficulty": 4,
      "rating": 5,
      "category": "monitoring",
      "tags": ["large files", "cleanup", "analysis"],
      "task": "Find directories larger than 1GB and show their contents size",
      "solution": "find . -type d -exec du -sh {} \\; | grep -E '^[0-9.]+G'",
      "explanation": "find . -type d (find directories) -exec du -sh {} \\; (get size summary for each directory) | grep -E '^[0-9.]+G' (filter for sizes in gigabytes using regex). Identifies large directories for targeted cleanup.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Identify large directories for cleanup or archiving"
    },
    {
      "id": 131,
      "command": ["fdisk"],
      "difficulty": 3,
      "rating": 3,
      "category": "system admin",
      "tags": ["partitions", "disk", "information"],
      "task": "List all disk partitions and their sizes",
      "solution": "fdisk -l",
      "explanation": "fdisk -l (list all disk partitions and partition tables). Shows disk devices, partition types, sizes, and filesystem information. Requires root privileges to access all disks. Essential for disk management and troubleshooting.",
      "execution_time": "< 1 min",
      "requirements": ["sudo privileges"],
      "warnings": "Read-only operation but requires root access",
      "use_case": "Disk analysis and partition management planning"
    }
  ]
}