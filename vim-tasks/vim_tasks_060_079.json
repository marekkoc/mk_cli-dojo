{
  "tasks": [
    {
      "id": 60,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim vimrc",
      "tags": ["vim", "vimrc", "configuration"],
      "task": "Create basic .vimrc configuration file",
      "solution": ":e ~/.vimrc, then add: set number, set tabstop=4, set expandtab, syntax on, :w",
      "explanation": "Create ~/.vimrc file with basic settings: set number (line numbers), set tabstop=4 (tab width), set expandtab (use spaces), syntax on (syntax highlighting). Configuration persists across vim sessions.",
      "execution_time": "1-5 min",
      "requirements": ["vim", "write access to home directory"],
      "warnings": null,
      "use_case": "Permanent vim customization for consistent editing environment"
    },
    {
      "id": 61,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim vimrc",
      "tags": ["vim", "vimrc", "mappings"],
      "task": "Add key mappings to .vimrc",
      "solution": "Add to .vimrc: nnoremap <F2> :w<CR> (F2 to save), inoremap jk <Esc> (jk to exit insert mode)",
      "explanation": "nnoremap <F2> :w<CR> (map F2 to save in normal mode), inoremap jk <Esc> (map jk to escape in insert mode). Custom key mappings improve efficiency. nnoremap = normal mode non-recursive map.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "~/.vimrc file"],
      "warnings": null,
      "use_case": "Create custom shortcuts for frequently used commands"
    },
    {
      "id": 62,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim vimrc",
      "tags": ["vim", "vimrc", "autocommands"],
      "task": "Add autocommands for different file types",
      "solution": "Add to .vimrc: autocmd FileType python setlocal tabstop=4, autocmd BufWritePre * :%s/\\s\\+$//e (remove trailing spaces on save)",
      "explanation": "autocmd FileType python setlocal tabstop=4 (set tab width for Python files), autocmd BufWritePre * :%s/\\s\\+$//e (automatically remove trailing whitespace before saving any file). Automate file-specific settings.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "~/.vimrc file"],
      "warnings": null,
      "use_case": "Automatic file-type specific configuration and cleanup"
    },
    {
      "id": 63,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim plugins",
      "tags": ["vim", "plugins", "pathogen"],
      "task": "Understand vim plugin installation basics",
      "solution": "mkdir -p ~/.vim/{autoload,bundle}, install plugin manager like Pathogen or Vundle, add plugins to bundle directory",
      "explanation": "Create ~/.vim directory structure, install plugin manager (Pathogen, Vundle, Plug), download plugins to bundle directory. Plugin managers handle loading and updating plugins automatically.",
      "execution_time": "5+ min",
      "requirements": ["vim", "internet connection"],
      "warnings": "Plugin installation varies by system and plugin manager",
      "use_case": "Extend vim functionality with community plugins"
    },
    {
      "id": 64,
      "command": ["vim"],
      "difficulty": 5,
      "rating": 5,
      "category": "vim scripting",
      "tags": ["vim", "scripting", "functions"],
      "task": "Create custom vim function",
      "solution": "function! ToggleNumber()\\n  if &number\\n    set nonumber\\n  else\\n    set number\\n  endif\\nendfunction\\nnoremap <F3> :call ToggleNumber()<CR>",
      "explanation": "Define custom function ToggleNumber() that toggles line numbers on/off, map to F3 key. function! (with !) overwrites existing function. &number checks current setting. Demonstrates vim scripting basics.",
      "execution_time": "1-5 min",
      "requirements": ["vim", "~/.vimrc file"],
      "warnings": null,
      "use_case": "Create custom functionality not available in standard vim"
    },
    {
      "id": 65,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim tabs",
      "tags": ["vim", "tabs", "multiple files"],
      "task": "Work with tabs for multiple file editing",
      "solution": ":tabnew filename (open in new tab), gt (next tab), gT (previous tab), :tabclose (close tab)",
      "explanation": ":tabnew filename (open file in new tab), :tabedit (alias), gt (go to next tab), gT (go to previous tab), 3gt (go to tab 3), :tabclose (close current tab). Alternative to buffers for file management.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "multiple files"],
      "warnings": null,
      "use_case": "Visual multi-file editing with tab interface"
    },
    {
      "id": 66,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim tabs",
      "tags": ["vim", "tabs", "management"],
      "task": "Manage tab layout and movement",
      "solution": ":tabmove (move tab to end), :tabmove 0 (move to beginning), :tabonly (close all other tabs)",
      "explanation": ":tabmove (move current tab to end), :tabmove 0 (move to position 0 - beginning), :tabmove 2 (move to position 2), :tabonly (close all tabs except current). Organize tab layout efficiently.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "multiple tabs open"],
      "warnings": null,
      "use_case": "Organize workspace with optimal tab arrangement"
    },
    {
      "id": 67,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim advanced search",
      "tags": ["vim", "search", "regex"],
      "task": "Use regular expressions in search patterns",
      "solution": "/\\<word\\> (search whole word), /^Alice (line starts with Alice), /rabbit$ (line ends with rabbit), /[Aa]lice (case alternatives)",
      "explanation": "/\\<word\\> (whole word search using word boundaries), /^pattern (line start), /pattern$ (line end), /[Aa]lice (character class - A or a), .* (any characters). Regular expressions make searches more precise.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Precise pattern matching for complex search requirements"
    },
    {
      "id": 68,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim advanced search",
      "tags": ["vim", "search", "very magic"],
      "task": "Use very magic mode for easier regex",
      "solution": "/\\v(Alice|rabbit) (very magic mode), /\\vw+ (one or more word chars), /\\v^\\s*$ (empty line with optional whitespace)",
      "explanation": "/\\v (very magic mode - most characters have special meaning), /\\v(Alice|rabbit) (alternation), /\\vw+ (word characters), /\\v^\\s*$ (line with only whitespace). Easier regex syntax than default vim mode.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Complex pattern matching with more intuitive regex syntax"
    },
    {
      "id": 69,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim advanced replace",
      "tags": ["vim", "replace", "capture groups"],
      "task": "Use capture groups in search and replace",
      "solution": ":%s/\\v(\\w+) (\\w+)/\\2, \\1/g (swap first two words), :%s/\\v\"(.*)\"/'\\1'/g (change double to single quotes)",
      "explanation": ":%s/\\v(\\w+) (\\w+)/\\2, \\1/g (capture two words, swap order with comma), :%s/\\v\"(.*)\"/'\\1'/g (capture content between double quotes, replace with single quotes). \\1, \\2 reference captured groups.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "text with quoted strings"],
      "warnings": null,
      "use_case": "Complex text transformations and reformatting"
    },
    {
      "id": 70,
      "command": ["vim"],
      "difficulty": 5,
      "rating": 5,
      "category": "vim advanced editing",
      "tags": ["vim", "sorting", "filtering"],
      "task": "Sort lines and filter content",
      "solution": ":sort (sort lines), :sort! (reverse sort), :sort u (unique sort), :'<,'>sort (sort visual selection)",
      "explanation": ":sort (sort lines alphabetically), :sort! (reverse sort), :sort u (sort and remove duplicates), :sort n (numeric sort), :'<,'> (range for visual selection). Built-in sorting functionality.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "text with multiple lines"],
      "warnings": null,
      "use_case": "Organize lists, remove duplicates, sort data"
    },
    {
      "id": 71,
      "command": ["vim"],
      "difficulty": 5,
      "rating": 5,
      "category": "vim advanced editing",
      "tags": ["vim", "arithmetic", "increment"],
      "task": "Increment and decrement numbers",
      "solution": "Ctrl+a (increment number), Ctrl+x (decrement number), g Ctrl+a (increment sequence), visual select + g Ctrl+a (create sequence)",
      "explanation": "Ctrl+a (increment number under cursor), Ctrl+x (decrement number), 5 Ctrl+a (add 5), g Ctrl+a on visual selection (create incrementing sequence). Works with decimal, hex, octal numbers.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "text with numbers"],
      "warnings": null,
      "use_case": "Modify version numbers, create numbered lists, adjust values"
    },
    {
      "id": 72,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 4,
      "category": "vim session management",
      "tags": ["vim", "session", "workspace"],
      "task": "Save and restore vim sessions",
      "solution": ":mksession mysession.vim (save session), vim -S mysession.vim (restore session), :source mysession.vim (load in current session)",
      "explanation": ":mksession filename.vim (save current session - open files, windows, settings), vim -S session.vim (start vim with saved session), :source session.vim (load session into current vim). Preserve workspace state.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "multiple files/windows open"],
      "warnings": null,
      "use_case": "Preserve complex multi-file editing environments"
    },
    {
      "id": 73,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim diff mode",
      "tags": ["vim", "diff", "comparison"],
      "task": "Compare files using vim diff mode",
      "solution": "vimdiff file1 file2 (start in diff mode), :diffthis (make current window diff), ]c (next change), [c (previous change)",
      "explanation": "vimdiff file1 file2 (start vim comparing two files), :diffthis (enable diff mode for current window), ]c (jump to next difference), [c (jump to previous difference), :diffoff (disable diff mode).",
      "execution_time": "< 1 min",
      "requirements": ["vim", "two different files"],
      "warnings": null,
      "use_case": "Compare file versions, review changes, merge conflicts"
    },
    {
      "id": 74,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim diff mode",
      "tags": ["vim", "diff", "merge"],
      "task": "Merge changes between files in diff mode",
      "solution": "do (diff obtain - get change from other window), dp (diff put - send change to other window), :diffupdate (refresh diff)",
      "explanation": "do (obtain change from other window to current), dp (put change from current to other window), :diffupdate (refresh diff highlighting after manual changes). Interactive change merging.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "diff mode active"],
      "warnings": null,
      "use_case": "Merge file versions, resolve conflicts, integrate changes"
    },
    {
      "id": 75,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim help system",
      "tags": ["vim", "help", "documentation"],
      "task": "Navigate vim's built-in help system",
      "solution": ":help (general help), :help motion.txt (specific topic), Ctrl+] (follow link), Ctrl+o (go back), :helpgrep pattern (search help)",
      "explanation": ":help (open help), :help topic (specific help topic), Ctrl+] (follow help link under cursor), Ctrl+o (return to previous help location), :helpgrep pattern (search all help files). Comprehensive built-in documentation.",
      "execution_time": "< 1 min",
      "requirements": ["vim"],
      "warnings": null,
      "use_case": "Learn vim features and troubleshoot issues"
    },
    {
      "id": 76,
      "command": ["vim"],
      "difficulty": 5,
      "rating": 5,
      "category": "vim quickfix",
      "tags": ["vim", "quickfix", "compilation"],
      "task": "Use quickfix list for error navigation",
      "solution": ":make (compile), :copen (open quickfix), :cnext (next error), :cprev (previous error), :cc (current error)",
      "explanation": ":make (run make command and capture output), :copen (open quickfix window showing errors), :cn/:cnext (jump to next error), :cp/:cprev (previous error), :cc (show current error). Integrated development workflow.",
      "execution_time": "1-5 min",
      "requirements": ["vim", "makefile or compiler"],
      "warnings": "Requires configured makeprg",
      "use_case": "Compile code and navigate errors efficiently"
    },
    {
      "id": 77,
      "command": ["vim"],
      "difficulty": 5,
      "rating": 5,
      "category": "vim location list",
      "tags": ["vim", "location list", "search results"],
      "task": "Use location list for search results",
      "solution": ":lvimgrep /pattern/ *.txt (search in files), :lopen (open location list), :lnext (next result), :lprev (previous result)",
      "explanation": ":lvimgrep /pattern/ files (search pattern in multiple files, populate location list), :lopen (open location list window), :lnext (next search result), :lprev (previous result). Similar to quickfix but local to window.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "multiple text files"],
      "warnings": null,
      "use_case": "Search across multiple files and navigate results"
    },
    {
      "id": 78,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 4,
      "category": "vim encryption",
      "tags": ["vim", "encryption", "security"],
      "task": "Encrypt and decrypt files in vim",
      "solution": ":set cryptmethod=blowfish2, :X (set password), :w (save encrypted), vim file.txt (prompts for password)",
      "explanation": ":set cryptmethod=blowfish2 (set encryption method), :X (set password for current buffer), :w (save file encrypted). When reopening, vim prompts for password. Protects sensitive files.",
      "execution_time": "< 1 min",
      "requirements": ["vim with encryption support"],
      "warnings": "Remember password - recovery is not possible",
      "use_case": "Protect sensitive configuration files and personal data"
    },
    {
      "id": 79,
      "command": ["vim"],
      "difficulty": 5,
      "rating": 5,
      "category": "vim advanced",
      "tags": ["vim", "command line", "batch processing"],
      "task": "Use vim for batch text processing from command line",
      "solution": "vim -c ':%s/old/new/g | wq' file.txt (replace and save), vim -c 'normal ggVGgq' -c 'wq' file.txt (reformat paragraphs)",
      "explanation": "vim -c 'commands' file (execute vim commands on file), -c ':%s/old/new/g | wq' (substitute and save), -c 'normal ggVGgq' (select all and format), | separates commands. Automate text processing tasks.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "command line"],
      "warnings": null,
      "use_case": "Automated text processing, batch file modifications, scripting"
    }
  ]
}