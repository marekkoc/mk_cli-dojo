{
  "tasks": [
    {
      "id": 20,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim search replace",
      "tags": ["vim", "search", "replace", "substitute"],
      "task": "Replace first occurrence of 'Alice' with 'Alice Smith' in current line",
      "solution": ":s/Alice/Alice Smith/",
      "explanation": ":s/Alice/Alice Smith/ (substitute first occurrence of 'Alice' with 'Alice Smith' in current line). The :s command uses format :s/old/new/ for substitution.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Quick single replacement in current line"
    },
    {
      "id": 21,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim search replace",
      "tags": ["vim", "search", "replace", "global"],
      "task": "Replace all occurrences of 'Alice' with 'Alice Smith' in current line",
      "solution": ":s/Alice/Alice Smith/g",
      "explanation": ":s/Alice/Alice Smith/g (substitute all occurrences of 'Alice' with 'Alice Smith' in current line). The 'g' flag means global - replace all matches in the line, not just first.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Replace multiple instances in a single line"
    },
    {
      "id": 22,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim search replace",
      "tags": ["vim", "search", "replace", "whole file"],
      "task": "Replace all occurrences of 'rabbit' with 'bunny' in entire file",
      "solution": ":%s/rabbit/bunny/g",
      "explanation": ":%s/rabbit/bunny/g (substitute all occurrences of 'rabbit' with 'bunny' in entire file). The % means entire file, s is substitute, g is global flag for all matches per line.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Global text replacement across entire document"
    },
    {
      "id": 23,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim search replace",
      "tags": ["vim", "search", "replace", "confirmation"],
      "task": "Replace 'the' with 'THE' with confirmation for each replacement",
      "solution": ":%s/the/THE/gc",
      "explanation": ":%s/the/THE/gc (substitute 'the' with 'THE' globally with confirmation). The 'c' flag asks for confirmation: y (yes), n (no), a (all), q (quit), l (last).",
      "execution_time": "1-5 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Careful replacement where manual review is needed"
    },
    {
      "id": 24,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim visual mode",
      "tags": ["vim", "visual", "selection", "character"],
      "task": "Select characters in visual mode and delete them",
      "solution": "v (enter visual mode), hjkl to select, d (delete selection)",
      "explanation": "v (enter character visual mode), use hjkl or arrow keys to select characters, d (delete selected text). Visual mode shows selection highlighting.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Precise character-level selection and editing"
    },
    {
      "id": 25,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim visual mode",
      "tags": ["vim", "visual", "line selection"],
      "task": "Select entire lines in visual line mode",
      "solution": "V (enter visual line mode), jk to select lines, y (yank) or d (delete)",
      "explanation": "V (enter visual line mode - capital V), use j/k to select whole lines, then operate with y (yank), d (delete), or other commands. Selects complete lines only.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Line-based operations like moving paragraphs"
    },
    {
      "id": 26,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim visual mode",
      "tags": ["vim", "visual", "block selection"],
      "task": "Select rectangular block of text using visual block mode",
      "solution": "Ctrl+v (enter visual block mode), hjkl to select rectangle, I (insert at start) or A (append at end)",
      "explanation": "Ctrl+v (enter visual block mode), hjkl to select rectangular area, I (insert text at beginning of each line), A (append at end of each line). Useful for column editing.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Column editing, adding prefixes/suffixes to multiple lines"
    },
    {
      "id": 27,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim text objects",
      "tags": ["vim", "text objects", "word"],
      "task": "Delete/change inner word and around word",
      "solution": "diw (delete inner word), daw (delete around word), ciw (change inner word)",
      "explanation": "diw (delete inner word - word only), daw (delete around word - includes surrounding spaces), ciw (change inner word - delete and enter insert mode). Text objects work with d, c, y operators.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Precise word-level editing without manual selection"
    },
    {
      "id": 28,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim text objects",
      "tags": ["vim", "text objects", "sentences paragraphs"],
      "task": "Work with sentence and paragraph text objects",
      "solution": "das (delete around sentence), dis (delete inner sentence), dap (delete around paragraph), dip (delete inner paragraph)",
      "explanation": "das/dis (delete around/inner sentence), dap/dip (delete around/inner paragraph). Sentence ends with '.', '!', '?'. Paragraph is separated by blank lines. Very useful for prose editing.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Editing prose, articles, and documentation efficiently"
    },
    {
      "id": 29,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim text objects",
      "tags": ["vim", "text objects", "quotes brackets"],
      "task": "Edit content inside quotes and brackets",
      "solution": "di\" (delete inside quotes), da\" (delete around quotes), di( or dib (delete inside brackets)",
      "explanation": "di\" (delete inside double quotes), da\" (delete around quotes including quotes), di(/dib (delete inside parentheses), di[/di{ for other brackets. Works with any bracket type.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Code editing, working with quoted strings and function parameters"
    },
    {
      "id": 30,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 3,
      "category": "vim editing",
      "tags": ["vim", "insert modes", "append"],
      "task": "Use different insert modes: insert, append, open line",
      "solution": "i (insert before cursor), a (append after cursor), I (insert at line start), A (append at line end), o (open new line below), O (open new line above)",
      "explanation": "i (insert mode before cursor), a (insert after cursor), I (insert at beginning of line), A (append at end of line), o (open new line below and insert), O (open new line above and insert). Different entry points to insert mode.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Efficient text insertion at various positions"
    },
    {
      "id": 31,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "change", "replace"],
      "task": "Change text using change operator",
      "solution": "cw (change word), c$ (change to end of line), cc (change entire line), c3w (change 3 words)",
      "explanation": "c (change operator) deletes text and enters insert mode. cw (change word), c$ (change to end of line), cc (change entire line), c3w (change 3 words). More efficient than delete + insert.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Replace text efficiently in single operation"
    },
    {
      "id": 32,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "replace", "character"],
      "task": "Replace characters without entering insert mode",
      "solution": "r (replace single character), R (replace mode), s (substitute character), S (substitute line)",
      "explanation": "r (replace single character under cursor), R (enter replace mode - overwrite characters), s (substitute character - delete and insert), S (substitute entire line). Quick replacements without mode switching.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Quick character fixes and overwrites"
    },
    {
      "id": 33,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim navigation",
      "tags": ["vim", "character search", "find"],
      "task": "Find specific characters in current line",
      "solution": "fa (find next 'a'), Fa (find previous 'a'), ta (until 'a'), Ta (until before 'a'), ; (repeat), , (reverse repeat)",
      "explanation": "f{char} (find next character in line), F{char} (find previous character), t{char} (until character - stop before), T{char} (until before previous), ; (repeat last f/F/t/T), , (reverse direction). Line-only navigation.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Quick navigation to specific characters within lines"
    },
    {
      "id": 34,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim editing",
      "tags": ["vim", "join lines", "formatting"],
      "task": "Join lines together and format text",
      "solution": "J (join next line), 3J (join 3 lines), gJ (join without adding space)",
      "explanation": "J (join current line with next line, add space between), 3J (join 3 lines total), gJ (join without adding space). Useful for reformatting paragraphs and combining lines.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Text reformatting and line consolidation"
    },
    {
      "id": 35,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "indent", "formatting"],
      "task": "Indent and format lines",
      "solution": ">> (indent line), << (unindent line), 3>> (indent 3 lines), == (auto-indent line), gg=G (auto-indent entire file)",
      "explanation": ">> (indent current line), << (unindent current line), 3>> (indent 3 lines), == (auto-indent current line based on filetype), gg=G (go to top and auto-indent entire file). Essential for code formatting.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "sample_code.py open"],
      "warnings": null,
      "use_case": "Code formatting and indentation management"
    },
    {
      "id": 36,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim navigation",
      "tags": ["vim", "screen movement", "viewport"],
      "task": "Move viewport without moving cursor",
      "solution": "Ctrl+e (scroll down), Ctrl+y (scroll up), Ctrl+f (page down), Ctrl+b (page up), Ctrl+d (half page down), Ctrl+u (half page up)",
      "explanation": "Ctrl+e/y (scroll line by line), Ctrl+f/b (full page), Ctrl+d/u (half page). zz (center current line), zt (top), zb (bottom). Viewport control independent of cursor position.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Navigate large files while maintaining cursor context"
    },
    {
      "id": 37,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim navigation",
      "tags": ["vim", "matching", "brackets"],
      "task": "Jump between matching brackets and parentheses",
      "solution": "% (jump to matching bracket/parenthesis/brace)",
      "explanation": "% (jump between matching (, ), [, ], {, }, /* */, #if #endif, etc.). Works with many programming language constructs. Essential for code navigation.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "sample_code.py open"],
      "warnings": null,
      "use_case": "Navigate code structure and verify bracket matching"
    },
    {
      "id": 38,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim search",
      "tags": ["vim", "search", "word under cursor"],
      "task": "Search for word under cursor",
      "solution": "* (search forward for word under cursor), # (search backward for word under cursor)",
      "explanation": "* (search forward for exact word under cursor), # (search backward for exact word under cursor). Automatically uses word boundaries, very useful for finding variable/function uses in code.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt or sample_code.py open"],
      "warnings": null,
      "use_case": "Find all instances of variables, functions, or terms quickly"
    },
    {
      "id": 39,
      "command": ["vim"],
      "difficulty": 4,
      "rating": 5,
      "category": "vim editing",
      "tags": ["vim", "repeat", "dot command"],
      "task": "Repeat last command and use with motions",
      "solution": ". (repeat last command), combine with motions like w, j, etc.",
      "explanation": ". (dot command - repeat last change). Very powerful when combined with navigation. Example: cw to change word, navigate to next word, . to repeat change. Works with any editing command.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Efficient repetitive editing tasks"
    }
  ]
}