{
  "tasks": [
    {
      "id": 371,
      "command": ["ln"],
      "difficulty": 1,
      "rating": 2,
      "category": "file management",
      "tags": ["symbolic-links", "basic", "file-linking"],
      "task": "Create a symbolic link called 'current_app' pointing to apps/web/index.html",
      "solution": "ln -s apps/web/index.html current_app",
      "explanation": "ln -s (create symbolic link) apps/web/index.html (target file path) current_app (link name). The -s flag creates a symbolic (soft) link rather than a hard link.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Create quick access to frequently used files without duplicating content"
    },
    {
      "id": 372,
      "command": ["ln"],
      "difficulty": 2,
      "rating": 3,
      "category": "system admin",
      "tags": ["symbolic-links", "environment", "configuration"],
      "task": "Create a symbolic link 'active_config' that points to config/development/database.conf",
      "solution": "ln -s config/development/database.conf active_config",
      "explanation": "ln -s (create symbolic link) config/development/database.conf (target configuration file) active_config (link name). This allows switching between different environment configs by changing the link target.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Environment configuration management - easily switch between dev/staging/production configs"
    },
    {
      "id": 373,
      "command": ["find", "ln"],
      "difficulty": 3,
      "rating": 4,
      "category": "automation",
      "tags": ["symbolic-links", "batch-creation", "scripts"],
      "task": "Create symbolic links for all shell scripts in bin/ directory to make them available in current directory",
      "solution": "find bin/ -name '*.sh' -exec ln -s {} . \\;",
      "explanation": "find bin/ (search in bin directory) -name '*.sh' (find shell script files) -exec ln -s {} . \\; (execute ln -s for each found file, {} is placeholder for found file, . is current directory)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Make executable scripts easily accessible without modifying PATH"
    },
    {
      "id": 374,
      "command": ["readlink"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["symbolic-links", "investigation", "link-resolution"],
      "task": "Display the target of all symbolic links in the current directory",
      "solution": "find . -maxdepth 1 -type l -exec readlink -f {} \\; -print",
      "explanation": "find . -maxdepth 1 (search current directory only) -type l (find symbolic links) -exec readlink -f {} \\; (resolve absolute path of link target) -print (show link name)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Audit and troubleshoot symbolic links to understand file relationships"
    },
    {
      "id": 375,
      "command": ["ln", "ls"],
      "difficulty": 3,
      "rating": 4,
      "category": "version control",
      "tags": ["symbolic-links", "versioning", "deployment"],
      "task": "Create a 'current' symlink pointing to versions/v1.0 and show how to switch versions",
      "solution": "ln -sfn versions/v1.0 current && echo 'To switch versions:' && echo 'ln -sfn versions/v2.0 current'",
      "explanation": "ln -sfn (create symbolic link, -f forces overwrite existing, -n treats link to directory as file) versions/v1.0 (target directory) current (link name). The -n flag prevents following existing symlinks.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Blue-green deployments and version management for applications"
    },
    {
      "id": 376,
      "command": ["find", "file"],
      "difficulty": 3,
      "rating": 4,
      "category": "monitoring",
      "tags": ["symbolic-links", "broken-links", "maintenance"],
      "task": "Find all broken symbolic links in the directory tree and list their targets",
      "solution": "find . -type l ! -exec test -e {} \\; -exec ls -l {} \\;",
      "explanation": "find . -type l (find symbolic links) ! -exec test -e {} \\; (negation: where target does NOT exist) -exec ls -l {} \\; (show detailed info of broken links including their targets)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "System maintenance to identify and clean up broken symbolic links"
    },
    {
      "id": 377,
      "command": ["ln"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["symbolic-links", "relative-paths", "portability"],
      "task": "Create a relative symbolic link from project/src/ to the shared/stylesheets/ directory",
      "solution": "cd project/src && ln -s ../../shared/stylesheets/ styles",
      "explanation": "cd project/src (change to source directory) && ln -s ../../shared/stylesheets/ (relative path going up 2 levels then down to shared/stylesheets) styles (link name). Relative links are portable when directory structure moves.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Create portable links that work when project directory is moved or copied"
    },
    {
      "id": 378,
      "command": ["ln", "cp"],
      "difficulty": 4,
      "rating": 5,
      "category": "system admin",
      "tags": ["symbolic-links", "environment-switching", "atomic-updates"],
      "task": "Create an atomic configuration switching system using symbolic links",
      "solution": "ln -s config/development/database.conf temp_config && mv temp_config live_config",
      "explanation": "ln -s config/development/database.conf temp_config (create link with temporary name) && mv temp_config live_config (atomic rename to final name). This ensures the live_config link is never broken during updates.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Use atomic operations for production systems",
      "use_case": "Zero-downtime configuration updates in production environments"
    },
    {
      "id": 379,
      "command": ["find", "xargs"],
      "difficulty": 4,
      "rating": 4,
      "category": "automation",
      "tags": ["symbolic-links", "cleanup", "maintenance"],
      "task": "Remove all broken symbolic links from the directory tree",
      "solution": "find . -type l ! -exec test -e {} \\; -print0 | xargs -0 rm",
      "explanation": "find . -type l (find symbolic links) ! -exec test -e {} \\; (where target doesn't exist) -print0 (null-separated output) | xargs -0 rm (remove files, -0 handles filenames with spaces)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "This permanently removes broken links - backup first",
      "use_case": "Automated cleanup of broken symbolic links in large directory structures"
    },
    {
      "id": 380,
      "command": ["ln", "basename"],
      "difficulty": 3,
      "rating": 4,
      "category": "automation",
      "tags": ["symbolic-links", "batch-processing", "tools"],
      "task": "Create symbolic links for all executables in bin/ with names without .sh extension",
      "solution": "for file in bin/*.sh; do ln -s \"$file\" \"$(basename \"$file\" .sh)\"; done",
      "explanation": "for file in bin/*.sh (iterate over shell scripts) do ln -s \"$file\" (create link to original file) \"$(basename \"$file\" .sh)\" (link name without .sh extension) done",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Create cleaner command names for scripts without file extensions"
    },
    {
      "id": 381,
      "command": ["ls", "stat"],
      "difficulty": 3,
      "rating": 3,
      "category": "monitoring",
      "tags": ["symbolic-links", "analysis", "file-info"],
      "task": "Show detailed information about all symbolic links including their targets and permissions",
      "solution": "find . -type l -exec ls -la {} \\; -exec stat {} \\;",
      "explanation": "find . -type l (find symbolic links) -exec ls -la {} \\; (show detailed listing) -exec stat {} \\; (show additional file statistics including inode, timestamps, and target info)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Comprehensive analysis of symbolic link properties for troubleshooting"
    },
    {
      "id": 382,
      "command": ["ln", "dirname"],
      "difficulty": 4,
      "rating": 5,
      "category": "automation",
      "tags": ["symbolic-links", "directory-structure", "mirroring"],
      "task": "Create a symbolic link mirror of the data/ directory structure in backup/",
      "solution": "find data/ -type d -exec mkdir -p backup/{} \\; && find data/ -type f -exec ln -s \"$(pwd)/{}\" backup/{} \\;",
      "explanation": "find data/ -type d -exec mkdir -p backup/{} \\; (create directory structure in backup/) && find data/ -type f (find files) -exec ln -s \"$(pwd)/{}\" backup/{} \\; (create symbolic links with absolute paths)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Create backup directory structure with symbolic links to save space"
    },
    {
      "id": 383,
      "command": ["ln", "sed"],
      "difficulty": 4,
      "rating": 4,
      "category": "development",
      "tags": ["symbolic-links", "library-management", "dependencies"],
      "task": "Create a local 'node_modules' directory with symbolic links to shared libraries",
      "solution": "mkdir -p node_modules && find libraries/nodejs/ -mindepth 1 -maxdepth 1 -type d -exec ln -s \"$(pwd)/{}\" node_modules/ \\;",
      "explanation": "mkdir -p node_modules (create local modules directory) && find libraries/nodejs/ -mindepth 1 -maxdepth 1 -type d (find library directories) -exec ln -s \"$(pwd)/{}\" node_modules/ \\; (create absolute symlinks in node_modules)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Share libraries between projects to save disk space and ensure consistency"
    },
    {
      "id": 384,
      "command": ["find", "readlink"],
      "difficulty": 4,
      "rating": 5,
      "category": "security",
      "tags": ["symbolic-links", "security-audit", "path-traversal"],
      "task": "Audit symbolic links for potential security issues (links pointing outside project)",
      "solution": "find . -type l -exec readlink {} \\; | grep -E '^\\.\\./\\.\\./' && echo 'WARNING: Links escape project directory'",
      "explanation": "find . -type l (find symbolic links) -exec readlink {} \\; (show link targets) | grep -E '^\\.\\./'  (find links that go up directory levels) && echo (warn about potential security issues)",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Links escaping project boundaries may pose security risks",
      "use_case": "Security audit to prevent path traversal vulnerabilities via symbolic links"
    },
    {
      "id": 385,
      "command": ["ln", "watch"],
      "difficulty": 5,
      "rating": 5,
      "category": "monitoring",
      "tags": ["symbolic-links", "real-time", "monitoring", "automation"],
      "task": "Create a monitoring system that tracks which version is currently active using symbolic links",
      "solution": "ln -sfn versions/v1.0 current_version && watch -n 2 'echo \"Current version:\"; readlink current_version; echo \"Target exists:\"; test -e current_version && echo \"Yes\" || echo \"No\"'",
      "explanation": "ln -sfn versions/v1.0 current_version (create version link) && watch -n 2 (monitor every 2 seconds) 'echo \"Current version:\"; readlink current_version (show current target) echo \"Target exists:\"; test -e current_version (check if target exists) && echo \"Yes\" || echo \"No\"'",
      "execution_time": "long-running",
      "requirements": ["watch"],
      "warnings": "Use Ctrl+C to stop the monitoring",
      "use_case": "Real-time monitoring of application version deployments and rollbacks"
    }
  ]
}