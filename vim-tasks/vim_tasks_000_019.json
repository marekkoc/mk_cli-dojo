{
  "tasks": [
    {
      "id": 0,
      "command": ["vim"],
      "difficulty": 1,
      "rating": 1,
      "category": "vim basics",
      "tags": ["vim", "open", "file"],
      "task": "Open the Alice text file in vim",
      "solution": "vim sample_data/alice.txt",
      "explanation": "vim sample_data/alice.txt (open file in vim editor). Vim starts in normal mode. Use :q to quit if needed.",
      "execution_time": "< 1 min",
      "requirements": ["vim"],
      "warnings": null,
      "use_case": "Basic file opening for text editing"
    },
    {
      "id": 1,
      "command": ["vim"],
      "difficulty": 1,
      "rating": 1,
      "category": "vim basics",
      "tags": ["vim", "modes", "insert"],
      "task": "Enter insert mode and add your name at the beginning of the file",
      "solution": "i (enter insert mode), type 'Edited by [YourName]\\n\\n', then Esc (return to normal mode)",
      "explanation": "i (insert mode before cursor), type text including newlines (\\n represents Enter key), Esc (return to normal mode). Insert mode allows typing text like a regular editor.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Basic text insertion and mode switching"
    },
    {
      "id": 2,
      "command": ["vim"],
      "difficulty": 1,
      "rating": 2,
      "category": "vim basics",
      "tags": ["vim", "save", "quit"],
      "task": "Save the file and quit vim",
      "solution": ":wq (or :x)",
      "explanation": ":wq (write and quit - save file and exit vim). Alternative: :x (save and exit if changes made). The colon enters command mode.",
      "execution_time": "< 1 min",
      "requirements": ["vim"],
      "warnings": null,
      "use_case": "Standard workflow completion - save work and exit"
    },
    {
      "id": 3,
      "command": ["vim"],
      "difficulty": 1,
      "rating": 2,
      "category": "vim navigation",
      "tags": ["vim", "navigation", "basic"],
      "task": "Navigate to the word 'Rabbit' in the second paragraph using basic movement",
      "solution": "hjkl keys to move, or arrow keys. Navigate down to second paragraph, then right to 'Rabbit'",
      "explanation": "h (left), j (down), k (up), l (right) for character movement. Navigate by moving down several lines to find 'White Rabbit with pink eyes' in second paragraph.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Basic cursor navigation for text editing"
    },
    {
      "id": 4,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim navigation",
      "tags": ["vim", "word navigation", "movement"],
      "task": "Jump to the next word using word movement commands",
      "solution": "w (next word beginning), e (end of current word), b (beginning of previous word)",
      "explanation": "w (move to beginning of next word), e (move to end of current word), b (move to beginning of previous word). These commands respect word boundaries and punctuation.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Efficient word-by-word navigation for editing"
    },
    {
      "id": 5,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim navigation",
      "tags": ["vim", "word navigation", "WORD"],
      "task": "Move by WORD (whitespace-separated) instead of word",
      "solution": "W (next WORD), E (end of WORD), B (previous WORD)",
      "explanation": "W, E, B (capital versions) treat punctuation as part of words. 'Alice's' is one WORD but two words. Useful for navigating through punctuated text efficiently.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Navigate through punctuated text like URLs or code"
    },
    {
      "id": 6,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim navigation",
      "tags": ["vim", "line navigation", "movement"],
      "task": "Jump to beginning and end of current line",
      "solution": "0 (beginning of line), $ (end of line), ^ (first non-whitespace character)",
      "explanation": "0 (move to column 0 - beginning of line), $ (move to end of line), ^ (move to first non-whitespace character). These are essential for line-based editing.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Quick line positioning for editing and code formatting"
    },
    {
      "id": 7,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim navigation",
      "tags": ["vim", "document navigation", "jump"],
      "task": "Jump to the beginning and end of the document",
      "solution": "gg (beginning of document), G (end of document)",
      "explanation": "gg (go to beginning of document - line 1), G (go to end of document - last line). Essential for document overview and navigation.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Document overview and quick jumping to start/end"
    },
    {
      "id": 8,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim navigation",
      "tags": ["vim", "line numbers", "goto"],
      "task": "Go to specific line number (line 5)",
      "solution": ":5 (or 5G)",
      "explanation": ":5 (command mode - go to line 5) or 5G (normal mode - 5 followed by G). Both methods jump directly to specified line number.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Navigate to specific lines when debugging or editing large files"
    },
    {
      "id": 9,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 4,
      "category": "vim search",
      "tags": ["vim", "search", "find"],
      "task": "Search for the word 'Alice' in the text",
      "solution": "/Alice (then press Enter)",
      "explanation": "/Alice (forward search for 'Alice'), press Enter to execute search. Cursor moves to first occurrence. Case-sensitive by default.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Find specific words or patterns in text"
    },
    {
      "id": 10,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 4,
      "category": "vim search",
      "tags": ["vim", "search navigation", "next previous"],
      "task": "Navigate to next and previous search results",
      "solution": "n (next occurrence), N (previous occurrence)",
      "explanation": "After searching with /, use n (next match in same direction) and N (next match in opposite direction). Allows cycling through all search results.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open", "search performed"],
      "warnings": null,
      "use_case": "Review all instances of searched term in document"
    },
    {
      "id": 11,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim search",
      "tags": ["vim", "search backward", "reverse"],
      "task": "Search backwards for the word 'rabbit'",
      "solution": "?rabbit (then press Enter)",
      "explanation": "?rabbit (backward search for 'rabbit'), press Enter to execute. Searches from cursor position towards beginning of file. Use n/N to navigate results.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Find previous occurrences of terms"
    },
    {
      "id": 12,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim editing",
      "tags": ["vim", "delete", "character"],
      "task": "Delete a single character under the cursor",
      "solution": "x (delete character under cursor), X (delete character before cursor)",
      "explanation": "x (delete character at cursor position), X (delete character to the left of cursor). These are single-character delete operations in normal mode.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Quick character corrections and typo fixes"
    },
    {
      "id": 13,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "delete", "words"],
      "task": "Delete the next word from cursor position",
      "solution": "dw (delete word), de (delete to end of word), db (delete previous word)",
      "explanation": "dw (delete from cursor to beginning of next word), de (delete from cursor to end of current word), db (delete from cursor to beginning of current word). 'd' is delete operator combined with motion.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Efficient word-level editing and corrections"
    },
    {
      "id": 14,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "delete", "multiple words"],
      "task": "Delete multiple words at once",
      "solution": "d3w (delete 3 words), d2e (delete to end of 2nd word), 5dw (delete 5 words)",
      "explanation": "Combine numbers with delete commands: d3w (delete 3 words forward), d2e (delete to end of 2nd word), 5dw (alternate syntax - delete 5 words). Numbers multiply the motion.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Remove multiple words quickly, like 'very tired of sitting'"
    },
    {
      "id": 15,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim editing",
      "tags": ["vim", "delete", "line"],
      "task": "Delete entire line",
      "solution": "dd (delete current line), 3dd (delete 3 lines)",
      "explanation": "dd (delete entire current line), 3dd (delete 3 lines starting from current). The deleted content goes into default register and can be pasted with p.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Remove entire lines, sentences, or paragraphs"
    },
    {
      "id": 16,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim editing",
      "tags": ["vim", "copy", "yank"],
      "task": "Copy (yank) current line",
      "solution": "yy (yank line), 3yy (yank 3 lines), yw (yank word)",
      "explanation": "yy (yank/copy entire line), 3yy (yank 3 lines), yw (yank word). 'Yank' is vim terminology for copy. Content goes to default register for pasting.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Copy lines or words for duplication elsewhere"
    },
    {
      "id": 17,
      "command": ["vim"],
      "difficulty": 2,
      "rating": 3,
      "category": "vim editing",
      "tags": ["vim", "paste", "put"],
      "task": "Paste copied or deleted content",
      "solution": "p (paste after cursor/line), P (paste before cursor/line)",
      "explanation": "p (paste after current cursor position or line), P (paste before current cursor position or line). Works with yanked or deleted content from any register.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open", "content in register"],
      "warnings": null,
      "use_case": "Insert previously copied or cut content"
    },
    {
      "id": 18,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "copy", "word selection"],
      "task": "Copy specific words and paste them elsewhere",
      "solution": "yw (yank word), navigate to target location, p (paste)",
      "explanation": "yw (yank current word), move cursor to desired location using navigation commands (w, b, j, k, etc.), p (paste word). Demonstrates copy-navigate-paste workflow.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Duplicate words or phrases within document"
    },
    {
      "id": 19,
      "command": ["vim"],
      "difficulty": 3,
      "rating": 4,
      "category": "vim editing",
      "tags": ["vim", "undo", "redo"],
      "task": "Undo and redo changes",
      "solution": "u (undo), Ctrl+r (redo), U (undo all changes on line)",
      "explanation": "u (undo last change), Ctrl+r (redo undone change), U (undo all changes made to current line). Vim maintains unlimited undo history during session.",
      "execution_time": "< 1 min",
      "requirements": ["vim", "alice.txt open"],
      "warnings": null,
      "use_case": "Correct mistakes and experiment with changes safely"
    }
  ]
}