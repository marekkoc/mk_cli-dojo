{
  "tasks": [
    {
      "id": 76,
      "command": ["ls"],
      "difficulty": 1,
      "rating": 2,
      "category": "file management",
      "tags": ["listing", "permissions", "details"],
      "task": "List files with detailed information including permissions, owner, size and modification time",
      "solution": "ls -la",
      "explanation": "ls -l (long format showing permissions, owner, group, size, date) -a (include hidden files starting with dot). The long format displays: file type/permissions, link count, owner, group, size in bytes, modification date/time, filename.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Basic file system inspection and permissions checking"
    },
    {
      "id": 77,
      "command": ["ls"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["sorting", "size", "human-readable"],
      "task": "List files sorted by size in human-readable format, largest first",
      "solution": "ls -lhS",
      "explanation": "ls -l (long format) -h (human-readable sizes with K, M, G suffixes) -S (sort by size, largest first). Combines detailed listing with size sorting and human-friendly size display for easy identification of large files.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Identify largest files in directory for cleanup or analysis"
    },
    {
      "id": 78,
      "command": ["ls"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["time", "sorting", "modification"],
      "task": "List files sorted by modification time, newest first",
      "solution": "ls -lt",
      "explanation": "ls -l (long format) -t (sort by modification time, newest first). Shows files with detailed information ordered by when they were last modified, useful for tracking recent activity or changes.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Track recently modified files for debugging or monitoring"
    },
    {
      "id": 79,
      "command": ["ls"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["recursive", "tree", "subdirectories"],
      "task": "Display directory tree structure with file details recursively",
      "solution": "ls -laR",
      "explanation": "ls -l (long format) -a (include hidden files) -R (recursive - descend into subdirectories). Lists all files and directories in the entire directory tree with full details. Each subdirectory is labeled with its path.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Can produce very long output in large directory trees",
      "use_case": "Comprehensive directory structure analysis"
    },
    {
      "id": 80,
      "command": ["ls"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["hidden", "filtering", "patterns"],
      "task": "List only hidden files (starting with dot) in current directory",
      "solution": "ls -ld .*",
      "explanation": "ls -l (long format) -d (list directories themselves, not their contents) .* (glob pattern matching all files starting with dot - hidden files). The -d flag prevents descending into hidden directories like .git/.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Configuration file management and system file inspection"
    },
    {
      "id": 81,
      "command": ["ls"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["directories", "type", "filtering"],
      "task": "List only directories in current location",
      "solution": "ls -d */",
      "explanation": "ls -d (list directory names only, don't show contents) */ (glob pattern matching all items ending with slash - directories only). The trailing slash in the pattern ensures only directories are matched.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Directory navigation and structure overview"
    },
    {
      "id": 82,
      "command": ["ls"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["colors", "file types", "classification"],
      "task": "List files with color coding and file type indicators",
      "solution": "ls -laF --color=always",
      "explanation": "ls -l (long format) -a (include hidden) -F (append type indicator: / for directories, * for executables, @ for links, etc.) --color=always (force color output even when piped). Visual enhancement for file type identification.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Enhanced visual file browsing and type identification"
    },
    {
      "id": 83,
      "command": ["ls"],
      "difficulty": 4,
      "rating": 4,
      "category": "file management",
      "tags": ["inode", "links", "filesystem"],
      "task": "Display files with inode numbers and link count information",
      "solution": "ls -li",
      "explanation": "ls -l (long format) -i (show inode numbers - unique filesystem identifiers). Inode numbers help identify hard links (same inode = same file) and understand filesystem structure. Link count shows how many names point to the same inode.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Filesystem analysis and hard link detection"
    },
    {
      "id": 84,
      "command": ["ls", "grep"],
      "difficulty": 3,
      "rating": 3,
      "category": "file management",
      "tags": ["filtering", "executable", "permissions"],
      "task": "List only executable files in current directory",
      "solution": "ls -la | grep '^-..x'",
      "explanation": "ls -la (long format with hidden files) | grep '^-..x' (filter lines starting with - (regular file) followed by any two characters, then x (execute permission)). Regex matches files with execute permission for owner.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Security audit and script identification"
    },
    {
      "id": 85,
      "command": ["ls", "awk"],
      "difficulty": 4,
      "rating": 5,
      "category": "file management",
      "tags": ["size calculation", "statistics", "analysis"],
      "task": "Calculate total size of all files in directory using ls output",
      "solution": "ls -la | awk '{sum += $5} END {print \"Total size:\", sum, \"bytes\"}'",
      "explanation": "ls -la (detailed listing) | awk '{sum += $5}' (accumulate 5th column - file size in bytes) END {print 'Total size:', sum, 'bytes'} (after processing all lines, print total). Alternative to du command using ls output.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Directory size analysis without using du command"
    },
    {
      "id": 86,
      "command": ["ls"],
      "difficulty": 2,
      "rating": 2,
      "category": "file management",
      "tags": ["one column", "scripting", "parsing"],
      "task": "List files in single column format for easy script processing",
      "solution": "ls -1",
      "explanation": "ls -1 (force one filename per line output). Useful for scripting when you need to process filenames in loops or pipes without worrying about spaces or formatting. Default when output is not to terminal.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Shell scripting and automated file processing"
    },
    {
      "id": 87,
      "command": ["ls"],
      "difficulty": 3,
      "rating": 3,
      "category": "file management",
      "tags": ["access time", "atime", "usage"],
      "task": "Display files with access time instead of modification time",
      "solution": "ls -lau",
      "explanation": "ls -l (long format) -a (include hidden files) -u (use access time instead of modification time for sorting and display). Shows when files were last read/accessed, useful for identifying unused files.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Track file access patterns for security or optimization"
    },
    {
      "id": 88,
      "command": ["ls", "tail"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["newest", "recent", "monitoring"],
      "task": "Show the 5 most recently modified files in directory",
      "solution": "ls -lt | head -6 | tail -5",
      "explanation": "ls -lt (long format sorted by time, newest first) | head -6 (take first 6 lines including header) | tail -5 (take last 5 lines excluding header). Pipeline removes the header line and shows only the 5 most recent files.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Quick identification of recent activity in directories"
    },
    {
      "id": 89,
      "command": ["ls", "wc"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["count", "statistics", "inventory"],
      "task": "Count total number of files and directories in current location",
      "solution": "ls -1 | wc -l",
      "explanation": "ls -1 (one item per line) | wc -l (count lines). Simple way to count directory contents. The -1 flag ensures each file/directory is on its own line for accurate counting.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Directory inventory and file count statistics"
    },
    {
      "id": 90,
      "command": ["ls"],
      "difficulty": 4,
      "rating": 5,
      "category": "file management",
      "tags": ["reverse", "oldest", "chronological"],
      "task": "List files in reverse chronological order (oldest first) with full details",
      "solution": "ls -latr",
      "explanation": "ls -l (long format) -a (include hidden) -t (sort by time) -r (reverse order). Combines multiple options to show oldest files first, useful for finding old files or understanding historical file creation patterns.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Historical file analysis and finding oldest system files"
    },
    {
      "id": 91,
      "command": ["ln"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["symbolic link", "soft link", "shortcuts"],
      "task": "Create a symbolic link to a file in different directory",
      "solution": "ln -s /path/to/original/file.txt /path/to/link_name",
      "explanation": "ln -s (create symbolic link, not hard link) /path/to/original/file.txt (target file - can be absolute or relative path) /path/to/link_name (link name/location). Symbolic links can cross filesystem boundaries and point to non-existent files.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Create shortcuts to frequently accessed files or programs"
    },
    {
      "id": 92,
      "command": ["ln", "ls"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["hard link", "inode", "filesystem"],
      "task": "Create hard link and verify both files share same inode",
      "solution": "ln original.txt hardlink.txt && ls -li original.txt hardlink.txt",
      "explanation": "ln original.txt hardlink.txt (create hard link - no -s flag) && ls -li (if successful, show inode numbers with -i). Hard links share the same inode number, proving they're the same file with different names.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": "Hard links only work within same filesystem",
      "use_case": "File backup without duplicating data on same filesystem"
    },
    {
      "id": 93,
      "command": ["ln", "find"],
      "difficulty": 4,
      "rating": 4,
      "category": "file management",
      "tags": ["broken links", "cleanup", "maintenance"],
      "task": "Find and list all broken symbolic links in directory tree",
      "solution": "find . -type l ! -exec test -e {} \\; -print",
      "explanation": "find . -type l (find symbolic links) ! -exec test -e {} \\; (negation ! of test -e which checks if target exists) -print (print broken links). The test command returns false for broken links, ! inverts it to true.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "System maintenance and cleanup of broken symbolic links"
    },
    {
      "id": 94,
      "command": ["readlink"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["symbolic link", "target", "resolution"],
      "task": "Display the target of a symbolic link with full path resolution",
      "solution": "readlink -f symbolic_link_name",
      "explanation": "readlink -f (follow all symbolic links recursively and resolve to absolute path) symbolic_link_name. The -f flag resolves the entire chain of links to show the final target with full canonical path.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Trace symbolic link chains to find actual file location"
    },
    {
      "id": 95,
      "command": ["file"],
      "difficulty": 2,
      "rating": 3,
      "category": "file management",
      "tags": ["file type", "identification", "magic"],
      "task": "Determine file type and format of unknown file",
      "solution": "file unknown_file.dat",
      "explanation": "file unknown_file.dat (analyze file content using magic numbers and patterns to determine type). Examines file headers, content patterns, and metadata to identify format regardless of filename extension. Uses /usr/share/magic database.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Identify file formats when extension is missing or incorrect"
    },
    {
      "id": 96,
      "command": ["stat"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["metadata", "timestamps", "permissions"],
      "task": "Display comprehensive file metadata including all timestamps",
      "solution": "stat filename.txt",
      "explanation": "stat filename.txt (show detailed file statistics including size, permissions, timestamps, inode, device, links). Displays access time, modify time, change time, birth time (if supported), plus filesystem-specific information.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Forensic analysis and detailed file information gathering"
    },
    {
      "id": 97,
      "command": ["file", "find"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["batch", "file types", "analysis"],
      "task": "Identify file types for all files in directory recursively",
      "solution": "find . -type f -exec file {} \\;",
      "explanation": "find . -type f (find all regular files recursively) -exec file {} \\; (execute file command on each found file). Provides comprehensive file type analysis for entire directory trees, useful for content discovery.",
      "execution_time": "1-5 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Content analysis and file type inventory of unknown directories"
    },
    {
      "id": 98,
      "command": ["xdg-open", "file"],
      "difficulty": 3,
      "rating": 4,
      "category": "file management",
      "tags": ["default program", "associations", "desktop"],
      "task": "Check default application for file type and open file with it",
      "solution": "file document.pdf && xdg-open document.pdf",
      "explanation": "file document.pdf (identify file type) && xdg-open document.pdf (if identification succeeds, open with default application). xdg-open uses desktop environment's file associations to launch appropriate program.",
      "execution_time": "< 1 min",
      "requirements": ["xdg-utils"],
      "warnings": "Requires desktop environment",
      "use_case": "Verify and use system file associations for opening files"
    },
    {
      "id": 99,
      "command": ["awk"],
      "difficulty": 3,
      "rating": 4,
      "category": "text processing",
      "tags": ["field extraction", "columns", "delimiter"],
      "task": "Extract specific columns from space-separated file and print them",
      "solution": "awk '{print $1, $3}' data.txt",
      "explanation": "awk '{print $1, $3}' (print first and third field from each line) data.txt. AWK automatically splits lines into fields using whitespace. $1, $3 extracts specific columns, comma adds space between them in output.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Extract specific data columns from structured text files"
    },
    {
      "id": 100,
      "command": ["awk"],
      "difficulty": 4,
      "rating": 5,
      "category": "text processing",
      "tags": ["conditional", "filtering", "logic"],
      "task": "Print lines where column 2 is greater than column 3",
      "solution": "awk '$2 > $3 {print}' numbers.txt",
      "explanation": "awk '$2 > $3 {print}' (if second field > third field, then print the line) numbers.txt. AWK pattern-action syntax: condition before braces determines when action executes. Print is default action when omitted.",
      "execution_time": "< 1 min",
      "requirements": null,
      "warnings": null,
      "use_case": "Conditional data filtering and analysis in structured files"
    }
  ]
}